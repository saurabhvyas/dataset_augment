sometimes in our computing life we
actually make use of software without
realizing that we are using a particular
piece of software and one very good
example of this is ffmpeg ffmpeg is
actually a command-line utility and its
job is to do a file format conversion
and in that process it can also do a
number of cool things now because the
license of ffmpeg it is actually
included in certain other pieces of
software you know to do its job in the
background and as a result you may or
may not realize that it's actually that
but in fact it is so what we're going to
do today is we are not only going to
give ffmpeg the recognition it deserves
we're gonna learn how to actually use it
from the command line that is the plain
vanilla ffmpeg running on your computer
from scratch so yeah I hope this
interests you after learning how to use
ffmpeg I've actually found it quite
useful and indispensable in many
situations so yeah I hope you think the
same you're watching another random
Wednesday episode on zero six one two TV
hello and welcome back to another random
Wednesday episode so ffmpeg a very
interesting tool let's begin by learning
how to install it we'll then move on to
the basics and then to some more
interesting things you can do with this
piece of software of course as it turns
out it is much more than a file format
converter
oh yeah like I said we'll see it when
the time comes first
of course is how do we install this
program well you can find a download
link in a video description
it will send you to the download page on
your official ffmpeg site you realize
right off the bat that things are a
little bit complicated because there are
three different versions of ffmpeg you
can choose from but they do tell you
that you know if you have no idea what
you're supposed to do here just pick the
static version so that's what we're
gonna do basically the idea is the
static version contains all of ffmpeg in
1xe file which for our purposes is
the most convenient so I would recommend
that as well go ahead and download the
latest version for whatever business
your computer is and you realize that
what you end up with is an archive open
the archive in an archive manager of
some sort if you don't have one you can
check out P zip which I will also link
to in a video description within the
archive enter the bin folder and look
for ffmpeg that's really the only file
you need so I tried that to some
location that you can remember and we
can begin convert it now if you intend
to use ffmpeg from anywhere on your
computer you might want to you know save
it somewhere important like in Program
Files folder and then link to it using
the path variable so what you're seeing
on screen right now are the steps I've
used to do that I do actually have
things set up this way because well it's
just easier for me
of course this step is optional so if
you don't want to do that then make sure
ffmpeg is in the same folder as the
video files you want to work with with
that out of the way let's move on to the
fun part and that is to actually convert
files with ffmpeg now previously did
this I know I mentioned videos
repeatedly but s turns out ffmpeg can
also work with images and audio
basically well it's a command-line
utility you just tell it what follow the
process and what kind of output you want
and it just does it that's how amazing
it is so let's actually try a very
simple example first of taking a video
file and converting it from avi to mp4
now what you see here is a folder in
which I have stitched the files I want
to work with throughout this video you
can open a command line very quickly on
a Windows computer by first making sure
no files are selected then hold down
shift right click empty space and then
click on open command window here that's
convenient because the command window
opens in that particular folder so you
can get started right away here's what
ffmpeg syntax looks like
you start off by saying ffmpeg then you
say - I
which means I'm about to specify an
input file and then you go ahead and
specify the input file so what we want
to do here is we want to convert an avi
file to mp4 so simply all you have to do
is to actually press space and type out
the new name of the file making sure
that the extension is mp4 hit enter and
well off it goes ffmpeg is now
converting an AVI file to mp4 by just
looking at the file extension of the
file name you gave it that is how simple
ffmpeg actually is and a lot of the
times when we want to convert between
different file formats that's really all
you need to do but well the time will
come when you want to do something more
complex and that is where the command
switches start to commit probably the
first thing that concerns you would be
the quality of the file you will
probably want to be able to tweak up the
quality and what I'm going to show you
here works for mp4 and Evi respectively
let's start with avi now there is a
factor and image compression called the
quantizer that actually affects file
quality and it is linked to you know how
we should choose a bit rate when it
comes to variable bitrate encoding but
we won't go into too much detail about
that basically all you need to know is
that quantizer is a number the smaller
the number the higher the quality of
course the higher the quality the higher
the file size so there's a trade-off you
need to work with to set the quantizer
for an output avi file all you have to
do is what we call ffmpeg you specify
the input and then you type dash Q
followed by a number this number is of
course the quality setting you what
numbers between 20 to 30 is common but
if you want a very high quality video
you can go as slow as a single digits if
you want it to be lower quality you can
go as high as 50 experiment you'll be
able to see the difference in the
different settings you choose do note
that this only works when you are right
seeing a file with a dot Evi expansion
if you're doing this for mp4 files then
you want to specify the CRF value
instead so instead of - Q you type - CRF
and then enter your number
I think this exists on a slightly
different scale from the - Q flag so
yeah be careful of that the values are
not necessarily the same
once again experiment you know look at
the file size look at the quality and
decide whether you want to bump it up or
down if you prefer final control you can
also specify the exact bitrate of the
output file now bit reads work for both
audio and video in a file so you'll
probably want to tell it whether you
want this to work on the video channel
on the audio channel and to specify this
you want to enter a colon and then type
V or a depending on which scream you
want the target then give it a number
for example if I want a video quality to
be a thousand K which is actually quite
low well you can do that I can even
specify both audio and video bit rates
at the same time and that will fix the
two bit rates of the two different
streams this is of course only if you
want finer control so yeah for the vast
majority of use cases
I'll say you know what you've learned so
far covers your bases but let's see we
want to go a step further let's take a
look at F F MPEG filters just for fun
now yes with you ffmpeg actually comes
bundled with a whole bunch of different
filters and they all have various
effects on the video itself what I've
done is through the whole list of video
and audio filters I've picked a total of
five to go through with you two of them
are for audio and the remaining three
are for video and these are the things
you probably do the most often so yeah
let's take it from the top we're going
slideshow mode once again because with
overrun let's quickly jump through the
five filters first let's treat the
volume to do this simply add the
following flight to the ffmpeg call the
flag itself says we want to use a filter
on the audio channel and its parameter
sister
want to call the volume filter with a
setting of to the number we provide is
actually a multiplier so when we say
volume equals two we are actually
doubling the volume you can of course
use decimal volumes including values
smaller than one to reduce the volume
next channel remapping sometimes we
accidentally record with a mono mic into
a stereo track causing the sound to only
go to the left channel we can easily fix
this by mapping the audio from the left
input channel to both the output
channels that's why this command call
means the left channel is 0 and the
right channel is 1 so what we're doing
here is mapping the input left channel
to the output left Channel and then the
input left channel to the output right
channel thus creating an audio track
that has sound on both sides let's move
on to the video filters first cropping
the syntax looks like this notice how we
save filter : V because we now want to
target video we then say crop and
specify up to 4 parameters the first two
are width and height which specify the
width and height of the output the two
remaining parameters are optional and
they specify the upper left corner of
the cropping if unspecified the cropping
is centered you can use arithmetic for
this as well for example this statement
means that we want to crop the video to
2/3 of its original size the variables
in underscore W and in underscore each
are available referring to the input
width and height respectively next video
scaling this looks very similar to the
first two parameters of the crop filter
use W and H to set the width and height
of the output you can also use
arithmetic like with cropping the
variables in underscore W and in
underscore H are also available here in
addition if you like proportional
scaling you can't specify negative 1 for
one of the input parameters its value
will be determined from the length you
do provide finally rotation simply say
rotate equals &amp; Spell
via angle unfortunately your angle needs
to be specified in radians luckily it's
not that hot since you can just multiply
it by the constant PI over 180 so the
following statement refers to a
clockwise rotation of 45 degrees the
result of this operation looks something
like this and they have it we've
actually gone through a pretty
comprehensive beginner's guide to
installing and using ffmpeg and we've
even taken a look at some complex
features in the form of some filters but
I've barely scratched the surface
like I said ffmpeg has a whole host of
filters and if you want to look at the
full list I will include the link in the
video description so you can find out
more that's all there is for this
particular episode it does look like
I've over run a bit so sorry about that
but hopefully you found this video
insightful anyway thank you very much
for watching and until next time you're
watching zero six one two TV thank you
very much for watching if you like this
video consider checking out the rest of
my work on my channel alternatively you
may be interested in a playlist of my
earlier work on computing and computer
science topics if you'd like to show me
some monetary support I am on patreon
you can find a link to my campaign in
the video description of course you can
simply like this video or leave a
comment I'll be sure to respond as soon
as I can
to keep in touch with my future uploads
do subscribe to this channel and for
even more updates check out the official
Twitter account for this channel at zero
six one two TV thank you for your
support
if it jumped over another page, press CTRL + F4 to close it re offline!
today we're going to have a very very
basic quick look at ffmpeg and doing
some video conversions so I'm in a
folder here I'll list out my files I've
got one video file to an MPEG file from
my sony hard drive camera and let's say
I want to convert that to a avi file all
that do is if you don't really have
ffmpeg installed it definitely should be
in repositories I think every distro has
it in its repositories just type ffmpeg
once you have it installed and then do -
I this is for your input file and then
the name of your input file which for us
is that and then the name of your output
file and we'll call it the same thing
only able to say avi and it will take a
few seconds it's a short little clip I
probably should have played it for you
first let's play the original clip we'll
play M player and the MPEG file there it
is it's a video of my wife walking down
a trail up in Colorado when we were up
there a little bit ago and now we'll do
the same thing will play the AVI file we
just created now you'll notice the
quality is much lower and that's just
because we just use the default settings
on ffmpeg in future tutorials we're
going to get into presets and then also
getting into configuring stuff yourself
but quick just like that you convert it
to an avi file but once again the
quality is kind of low we can also do
the same thing if we wanted if we had an
AVI file we can do ffmpeg and we'll do -
off your Impa file
don't forget the - I because it will try
to overwrite your original file it will
definitely ask you first if you don't
put the - I'll give you an example if
you just do ffmpeg and the name of a
file and then let's say I try to convert
that to an avi we'll name it something
else in here you have an avi name that
we'll hit enter and it'll say do you
want to overwrite this file that's our
original file no the reason it's asking
is because we forgot the - I and doesn't
know what the input file is and it's
looking at that as an output file so
definitely remember your - I
there for input file so there's our
input file if we want to convert the avi
file we've created to an MPEG all F do
is give it a name and say MPEG and it
knows we want to convert it to an MPEG
because we put that at the end there
we will hit enter and it's creating an
MPEG file now from that avi file so
we're losing hall two even more now but
once again this is the default settings
for MPEG and in future tutorials going
to show you how to do higher quality
like DVD quality very simply but we'll
mplayer that M player and the name of
the new MPEG file and you can see right
there it's definitely more pixelated
there's really not much audio to this
file there is an audio track though and
I can hear it in my speakers here it's
kind of low especially but you can hear
the sound of the way the wind and stuff
so if we want to take a video file and
extract the audio from it same thing we
just did ffmpeg - I I'll grab the
original MPEG file here and I'll say
I'll just call it audio dot mp3 and it
create an mp3 file which we can play
with mplayer once again there wasn't
much audio to that video but it did
create an mp3 file and I'm playing it
now and I know you can't hear it in the
microphone so once that's done let's do
the same thing we'll do ffmpeg - I for
input our input video and we'll say wave
and that was much quicker than the mp3
because it didn't have to do the MPEG
compression for the mp3 so now we can
just do em player audio and the wav file
and now it's playing the wav file so
that's how you convert very simply to
avi or MPEG or mp3 or avi using ffmpeg
once again this was a very basic very
simple look at ffmpeg and I've got a lot
more tutorials want to do some pretty
cool stuff after a few tour
so keep on watching visit films by Chris
comm visit our forums and our IRC
channel all the links are in the
description I hope you have a great day
and I hope you keep on watching
so we are having a family get-together
inside and I was like you know what it's
a Monday and I owe these guys a Linux
video so I'm going to come out here in
100 plus degree weather and show you
guys how to convert video files now with
Windows if you've had experience with it
it's like a complete nightmare you can
download these open source or maybe
you're paying for these file converters
to convert like say your MOV files your
WMV files to mp4 files or so on and so
forth and when you go through the hour
so conversion it's it's crap just to
give you an example of some of the video
conversions that I've tried in Windows
they end up kind of looking like this
some sort of impression mystic paint
maybe that moves it's so easy to do in
Linux and especially if you use ffmpeg
and what that is is it's a command-line
tool that helps you convert one file
losslessly to another file so it's super
easy and I'm going to show you how to do
it in this case I'm using Ubuntu but you
can use it in any Debian based distro
and the command is sudo apt-get install
ffmpeg which I have neatly at the bottom
for you now I'm going to show you all
the file formats available to ffmpeg and
you can do that by typing ffmpeg space -
formats and here's a list of all the
containers and the codecs and the
formats that you have available to you
which will be different depending on
which ones you have installed change
directories to the location of the video
file now the next command is going to
look a little scary but it actually
makes intuitive sense and you can check
it out in the sidebar the - your file
name would actually be the name of your
file and also the extension of your file
and the - V codec is the file format
that you want to convert it to so in my
case it's WMV - - same q is actually
same quality assuming that you'd want it
to be in the same quality and the - a
code
is the audio codec you want to use the
dash F is the container that you want to
use a fun fact to avoid frustration is
all of this is case sensitive if you
have more than one video format and
you're looking to batch convert them I
wrote a script with the help of Andrew
46 and the guys at a poun two forums org
which is located below as well as on the
sidebar so the bottom line is when it
comes to losslessly converting video
formats look no further than Linux it's
safe stable and sexy we know this
already but it can completely save you
time and energy and it's very simple the
command lines and if you check out I
made a video for multimedia codecs if
you need some codecs ffmpeg also has a
codec library but my video also might
help with that one so I hope you can
figure it out and you can totally do it
this is my mouth right here can you see
me pointing
Hello to all and all we
today found for a new
tutorial will help you install
ffm psg so you are very useful for
make the records with their hit modes
So already you go to this link here
who hesitate in the description
So you go here and click on
so this link to install on windows
you download the version you
want 32 or 64 bit depending on your
computer
I've downloaded here and in 64
then you will have to download
you patch will allow you to make
j FFMBE compatible with the replay fashion
So here we go we will install it
So here it is downloaded
two files and now it will
have to put them in a folder
So after going to have to move
So I'll put them in a
folder I'll call it done
move made this fact mpg
open and so I'll put it
so first before you go Extra
with 7 of 10 if you have it
Download it's not complicated it is
google So here you are
extract matter will go here and you
going to put in the patch is
just open this patch so you
have seen that there it installed ffm
psg so good you can click
on anywhere and after you go
in bean and you will note the way
the file so you do that you
add a flash in reverse
that's like that
I forgot to behold like this you
do control these and you open
Minecraft with forge once
minecraft is launched you Faure
open your replays and I will open the
last it may spoil a little
bit my next project so I will not
too show is simply too
you do your thing like that hop
yes like that and once you
made rendering adjust your settings
and advanced settings
you go you click
on the command line parameters
and there we will have to
all of what you have
not copied and therefore control b
now you will be in the
made but I will not do it because
patrick interesting that knows what
So here but do you understand
the principle you could install
Project hopefully if
problem I have this comment Clan
territory to help you if it's you
helped to leave a blue thumb and
recommend this video with friends
So who would this I say to
more for a next video
know
except kiev
again saves so than elektroauto
logistics tourism with its graffitis
lim
should there
Mark Griffith here and today we're going
to use a small command line program
called ffmpeg and we're going to use it
to make an image sequence into a movie
now this program is free it's open
source it's very powerful and it works
on Windows Mac and Linux as well so you
can download a version for whatever
computer you are using okay so first
thing you need to do is install ffmpeg I
do have an article on this and maybe a
video in the future so I'll link to that
now and basically you want to open up a
terminal and navigate to this folder
where your image files are this is once
ffmpeg is installed so run terminal your
terminal session may show up as what
I've just changed some settings here so
it's black but yours may be white now
typically LS is to list the contents of
the directory that you're in we're in
the home directory change directory CD
and we want to go to pictures if you're
not used to it it's a little bit slow LS
again show us what's there I put this in
follicle time-lapses in pictures and I
called it also if you press the tab key
you just start typing and oppressor tab
it will autocomplete it for you which
can really save some time okay so we
have our image images there a whole load
of them they don't overlap so that's
another story if they overlap this is
just a simple case so going from image
one two three three all the way through
two four one three nine now I do have a
corresponding article which we are
following along with here okay so if you
want to go back to this and you don't
watch the whole video again just go and
have a look at the article and it's got
to look man today you can cut
paste and all that sort of thing all
right so back to our command line now
first make sure ffmpeg is installed
properly and it's all working so should
just be able type ffmpeg and it will
show you the version number there should
run fine okay so we want to do will
explain it as we go on ffmpeg and we're
going to tell it with the - our option
this will tell it the frames per second
that we want to generate our file - then
we're doing a dash F and we type image -
that tells it to look for files look for
a list of image files we're going to
specify a start number in this case our
start number if we just scroll up here
the first image was one two three three
okay so that's the number of the first
one so we're going to put that in now we
do a - I and this specifies the image
filename or the the wild card if you
like it
on the pattern so we've got IMG
underscore and then we're going to type
% 0 for D now that % 0 for D basically
says numbers that are four digits wide
and they're integers counting up okay we
already specified the start number which
is 1 2 3 0 and the cent for 0 D we'll
substitute 1 2 3 0 and then the next
file it'll substitute 1 2 3 1 etcetera
and then dot and then jpg this is case
sensitive so make sure you get the case
right there
now our next option we're going to do a
V F and we're going to do some cropping
now these images they're straight out of
the camera they're 5,180 4 pixels wide
and 3456 pixels high now what we want to
do we want to make these straight into a
movie that is basically 1920 by 1080
which is um HD footage likewise you can
use similar message to do to do 4k as
well but we are going to undo HD now
we'll go to the notebook just quickly so
just say our image is like this and
we've got 5 by 8 4 by 3 4 5 6 now we're
going to be cropping it a little bit so
ffmpeg can do crops and resizes we're
going to do the cropping first so we we
want this section here and we want the
ratio to be 16 to 9 so basically we have
to calculate what this new height is
going to be we're going to do five by
nate 4 x 9/16 and that will give us two
nine one six two nine one six there now
we want to find out how much we're going
to crop top and bottom here and here and
to calculate that we do three four five
six our height over here - two nine one
six all divided by two and it will give
us 270 pixels okay so now we have enough
information to specify our crop that
we're going to do on the image and the
crop basically it's got a few arguments
so first we type crop equals and the
first two numbers are the actual size of
the crop now it's going to be the same
width as our original which is five one
eight four and it's going to be two nine
one six high okay and the crop is going
to start we're going to specify the x
and y position from the top left hand
corner and that will be zero another
column there and then zero and then 270
pixels down and that will give us
drop the way we want it now we can do
our scaling after that we do a comma and
we type scale equals one nine to zero
and a colon and 108 oh now you can also
just do a scale and make it as a
negative one and then you'll get
something that's 190 200 pixels wide but
it's still a bit higher than your normal
1080 and that's also quite useful if you
want to throw it into video editing
software we've already calculated the
aspect ratio correctly so we can leave
that negative one there and this will
work fine now we're going to specify
what codec we want to use ffmpeg isn't
capable of that a lot of different
codecs it is a bit tricky to note all
the settings but I generally use the
ProRes codec which is the codec of
choice if you're going to put it into
any sort of Apple video editing software
Final Cut Pro and I guess I movie as
well it's got the same back end so we do
a codec - V and we type ProRes and then
we go - profile column B and then
another - and that tells us to use
there's there's a number of preset
profiles and the v2 is just the normal 4
- 2 ProRes I think if you do a v3 it's
an even higher quality one and if you do
v1 that's the LT but we're going to do
v2 and then I'm going to do a dot dot
and a slash that tells us to save this
is for the output file to save our
output well I'm going to call it 12
millimeter REO hurt bird a dot MOV to
our to the parent directory just so it
doesn't get hidden in amongst all the
images there now another useful tip
we're just going to go back and insert a
little option here now this is ready to
go and it will generate our file that is
there are new video file but there's
quite a lot of files there so we don't
want to go and do this straight away we
want to just check that all their
settings are right because we're going
to be waiting a local mile if we want to
do that so if we put in here if we put a
dash T and then a zero a colon at zero a
colon that's 0 hours 0 minutes and 2
seconds if we do that it'll just use
enough images to make the first two
seconds of the video which in our case
is 60 frames alright let's give that a
go
just put just to make sure we put
preview there and press enter all right
I made a typo there somewhere so we go
back what was it
instead of - I I didn't put I put I - so
make that a - I you'll be able to cut
and paste these from my um from my
website by the way now you may have
noticed there of what I did it was I I
press the up arrow and that brings back
my last my last typed in command so you
don't have to type these in every single
time and it is really is a massive site
and time saver for you okay so try that
again
that file already exists yes we want to
override it because it actually started
writing it before when that command
failed so we want to overwrite that and
the way it goes so what you're seeing
here is the frame that it's up to how
many frames per second it is generating
the file out so it gives you an idea of
sort of how long it's going to take this
is not real time four point five and
then you get a bit right there as well
okay so that's done we go back to our
folder and because I specified for it to
go in the previous directory here it is
so that looks great it looks like our
crop is all worked and everything so I'm
pretty happy with that let's go and
delete that
- T option there
and we'll take away that preview bit and
this will write the whole file by the
way important the extension MOV tells it
to put it in QuickTime format
particularly if you're doing any sort of
Apple editing now the progress 42 to is
it's my standard I think it's a bit of
an industry standard as well but it is
um it's a codec which is optimized for
editing it's not compressed so much it's
compressed a little bit but it's not
compressed so much that it you have to
decode it in order to apply filters and
stuff when you're editing so you will
find using ProRes or two a lot better
right so let's press ENTER and we'll let
that go and while we do that actually
just for a benchmark another before any
command I just cancelled that I press
control C so if you've never used that
use control TC to cancel and I'm going
to type time in front of this just so I
can time how long this process actually
takes okay and we'll run that again and
yes we want to overwrite that file
because it started generating it before
and we let it go so let's let this go
and we'll see how long it takes I'll
fast board this we're saying as well
that this is a multi-threaded
application so it will use multiple
threads so it will take advantage of
your quad core or eight core or your
fancy processor which really does make a
difference like when you have a quad
core or an eight core processor and
you're just using a single threaded
application you know this can take eight
this can make things happen eight times
faster than if you are using an
application that wasn't compiled to use
multiple threads
okay so we're finished and that took us
12 minutes and let's go and have a look
at the file itself there we go
it's two point four nine gigabytes and
duration in one minute and 37 seconds
let's watch it now you'll notice that
the colors I'm using to make this
time-lapse that we're really quite flat
okay and I'll be able to change the
contrast bring the increase the contrast
there and bring the saturation up a bit
to make it look a bit better so this is
using the Technicolor sign style or a
flat profile which is um something that
you may use if you do video work that
you can actually see something crawling
off along the rock there that I was just
sitting on okay I'm pretty happy with
that anyway so what I may do I'll pick
the best bits probably just here where
I'm sitting with the dogs so that's
probably the coolest bit of the whole
time-lapse and yeah we'll we'll leave it
at that now before editing this we may
want to do another version so this is a
10 at 1920 by 1080p version now you may
want to do a full full 4k or 5k version
and again we can do that in ffmpeg just
bring up that last command and we'll
edit that last command I'm just going to
call this 5k and what I found
we're not going to do any cropping so
we'll delete that crop bit and on the
scale I'm going to put 5,000 and 8
pixels now I could do the full width of
the image here but I've found that
ffmpeg has a small bug in it and any
width higher than 5,000 and 8 pixels it
tends to crash it's not very good at the
really big stuff I guess no one's really
used it in anger and higher resolutions
anyway let's um let this one go this one
will it doesn't have to do
sizing so I'm not sure if this is going
to take longer or not but we've got that
time thing in there and we can compare
if it takes longer but it certainly will
be a lot bigger let's go okay so that's
finished and it took just under a just
under 20 minutes there to finish that
and we'll have a look at the file size
it's 20 gigabytes now even if you're if
you're doing 4k footage you can um
you'll be able to pan a little bit in
our case we've got this vignette ink in
the corners there but it's certainly
good to put it into your video editing
software even if you're doing 1080p
because they need you can do sort of
pans and zooms within the video editing
software itself now looking at playing
them back such large video files you
really need a computer with the
performance and the screen size as well
to play these back my computer certainly
does not have the performance to play it
back in real time and skipping frames
and stuff there so you don't really get
a good idea of what the time-lapse is
going to look look like so that's why
it's a good idea to do that little 1080p
1080p one which takes a little bit
quicker anyway okay so for more
information on ffmpeg and using it to
create movies out of image sequences
have a look on my website I've got a
page on on that exact subject and I'll
be going a couple of other videos on
making movies out of image sequences for
a few other different types of software
as well so mix to those below Cheers
thanks for watching
last time we started to explore the
potential of ffmpeg outside of video
conversion and well today we're gonna
continue along those same lines
last time we sort of restricted
ourselves to just the filters and ffmpeg
today we're gonna look beyond that and
we're gonna see what other features in
ffmpeg makes it all the more powerful
you're watching another random Wednesday
episode r06 wants you TV hello and
welcome back to another random Wednesday
episode today's video comes to you in
two parts first and foremost how to
actually mix multiple video streams and
filters together this alone is extremely
powerful and can actually allow you to
do many cool things on top of this we'll
also take a look at some editing
features in particular how to actually
make cuts within a video we'll also look
at ways to switch effects on and off
over time and then of course gives you
all the more power we all further ado
let's jump in to take a look at filter
graphs your cool method of stringing
together multiple filters now the basic
filters we've been using so far can
actually be expressed in sort of this
graphical manner you know the computer
science kind of graph not be math kind
of graph basically you have an input
video you stick it to a filter and well
you get an output so take for example an
actual ffmpeg command you have an input
file and that of course is your inputs
right here you put it through an EQ
filter and you get an output so yeah
fairly straightforward in fact if you
were to actually string together
multiple different filters it can still
be expressed in the same way if you do
EQ comma and sharp then of course EQ
happens first the result is passed over
to unsharped and unsharp does its work
so yeah hopefully that's been pretty
intuitive we're gonna basically expand
upon this concept to do
complex things take for example this
sort of messy thing I showed you towards
the end of the previous episode as you
can probably recall our showing you the
waves filter and I was actually mixing
it onto the original video itself
clearly this isn't going to be as
straightforward as the filter graphs
with in seeing so if let's actually try
and draw this out to get a better
understanding we start from our input
video this of course works exactly as we
expect that actually goes out to a split
filter in which I've actually sort of
duplicated a video three times into
three different streams for the first
two streams I've basically generated the
wave form using the wave form filter and
I've basically also used a pad filter
and what that does is it creates a whole
lot of blank space displaying the wave
itself wherever I actually tell it to so
yeah as you can see the results at this
point of time is you know a wave at a
side and a wave at the bottom the next
order of business is to actually combine
these two and I've achieved that using a
blend filter as you can see from the
arrows I've actually taken two video
streams and combined it into what the
results is something like this with the
two waves now stacked on top of each
other sending our attention back to the
remaining video stream
well I Pat it out so as to give it some
borders towards the left and a bottom
all that's left to do now is to blend
everything together creating the final
result what you see here is an example
of well somewhat more complex filter
graph all that's left to do now is to
actually turn this into an actual ffmpeg
command of course I shouldn't mention at
this point that if you're gonna be using
a complex filter graph you know one that
isn't just a straight line you are going
to have to use the filter complex
command switch and not any of the others
with C now instead of actually doing the
extremely complex example we've looked
at let's actually do something a little
bit simpler and hopefully a little bit
more fun basically I have a static image
of you know the background from the
video you've been seeing and what I also
have is a little animation on a green
background this of course means we can
actually do chroma keying or you know in
other words the green screen effect to
sort of stack these two videos on top of
each other
let's first actually try to visualize
how we're gonna do this of course we
have the green video as well as the
background and these two exist as two
separate input streams we're gonna take
the green video and perform what is
known as color keying on it this allows
us to generate a keyed version of the
video
all that's left to do then is to make
use of an overlay filter to actually
stick the keep video on top of the
background so yeah hopefully that's not
too complex let's begin by constructing
our ffmpeg command core notice something
that we haven't done before we've
actually now specified two input files
since that is of course what we need the
two input files are the green-screen
file as well as the background then of
course we have to specify our complex
filter string let's tackle the first
part and that is doing the color key
here you'll see the most important thing
you need to do when you're actually
constructing a complex photograph and
that is to actually name your streams
like so essentially this is just the
color key filter and this is just normal
filtering like we've seen previously
however we now include something to its
left in square brackets this in fact
tells us which video to actually work
with zero here actually has a special
meaning you see the two inputs that are
coming in actually named internally as
input zero and input 1 since we want to
actually run the color key effects on
input 0 well we have two states it of
course when we are done doing this we
want to name the output of the filter as
well and that of course comes at the end
I've called it keyed and since this is
actually arbitrarily defined by me well
you can actually call it anything so
yeah as a recap you're gonna have to
specify the inputs in square brackets
then the filter name then the output in
we're brackets again so alright let us
move on to do the next part which is to
actually merge the two video streams
together we start off with keet which is
of course what we've just creates it and
well we want to merge that onto the
background
aka inputs number one so here's how
we're gonna do it all we have to say is
one which is of course the background
clip then keed and then the overlay
filter notice that since we're dealing
with two inputs here both of these video
streams have to be specified before the
filter and me you also find that the
order of these two input streams
actually do matter and the reason for
this is because overlay is actually
looking to well take one of these two
inputs and overlay them on top of the
other in this case well according to the
documentation it wants the background
first and then the overlay to come next
so we do actually have to respect this
which is why I answer them in this
particular order of course basically
we're done all we have to do now is to
specify the file name and we get our
result notice that I did not actually
name the output stream coming out of the
overlay filter that's because we don't
need it there is an implicit connection
on a graph between the last filter and
the actual output file the same actually
holds true for inputs if you only have
one input then you don't actually need
to specify the inputs like this in this
case we're forced to be explicit about
which input we are talking about because
there are two of them of course in order
to get the correct result I actually had
to specify some parameters for the color
key filter so yeah don't forget your
parameters you can still specify them
even if you have a complex filter graph
the results of course look something
like this the chroma keying has been
correctly done and the two videos have
been stacked together as we would expect
so yeah those are filter graphs and they
I actually what makes up of Ampex or
flexible and powerful now we've already
spent quite a bit of time so let's move
through the next
quickly we're gonna take a look at some
simple trimming features available
within ffmpeg as well as how it can
actually turn certain effects on and off
over time let's take a look
ffmpeg has some timeline features both
the ctrl D filters as well as to do some
editing so let's take a look at both of
these things when it comes to using the
timeline to control filters well you
could have to actually specify things in
a kind of Matthew way basically if you
want to actually have a blur function
that only runs between you know with the
fifth second and a 10 second you can
actually say something like this you
want to end able this filter when T is
actually between 5 and 10 and yeah as
you can see well it works do note that
the unable feature isn't actually
available in every single filter but
many of the filters actually have it the
things you can actually use in a similar
way of course include T which is a
timestamp in seconds and which is the
actual frame number as well as W and H
which are the width and height of the
video if you need to perform comparisons
well you have access to features like
greater than greater than or equal less
than or less than or equal these
functions will give you one if the
comparison is true and they'll give you
zero if not same deal for between if X
is actually between you know the minimum
and maximum value then you'll get one
otherwise you'll get 0 if you want to do
more complex comparisons you can use if
and if not basically a test is run
against X in a case of if we want to
make sure that X is not 0 in the case of
if not the evaluation will only become
true if X is 0 in any case if the result
is true Y will be returned otherwise
zette will be returned very interesting
things can be done for example in this
command call which actually comes from
the official documentation what has been
created is a transition
essentially a blending operation is
happening and the intensity of the
blending between a and B which are the
two inputs actually changes over time as
you see there is a dependency on T
basically over a period of four seconds
one of the two inputs is being faded out
while the other is being faded in so
yeah this is actually an extremely
powerful feature available in ffmpeg
let's now talk about another editing
feature and that is slicing in the
sample video you've been seeing a lot
what we've actually done is we've made a
huge pen across the city skyline of
Singapore now let's say I don't actually
want the entire pan I only want the
spots in which the Marina Bay Sands is
actually visible I've scrubbed through
the video and realized that really I
only want the footage from the 14 second
mug to the 18 second mug
well you can of course do this with
ffmpeg and there are several different
methods to do so to actually get to the
start time we use a feature called
speaking that actually two ways to do
this input seeking and output seeking
and that command calls a little bit
different as you can see in this case
what I've actually done is we've made
use of the SS commands which to specify
the start time of the video the only
difference between these two command
calls is the order in which we do things
in input seeking we specify the time
first before we specify the input fault
in output seeking well we specify the
time after the input file oh and
incidentally speaking I'm specifying
that time the format being used here is
hours minutes and seconds of course
since this is a very short video we
don't have to do this we can simply
specify the number of seconds and ffmpeg
understands that as well now don't worry
too much about the difference between
input and output seeking I'll talk about
that in a minute for now let's take a
look at how to actually specify the end
point as it turns out that also two
different ways to do this you can either
specify
duration of the final output or you can
actually give an ending time step for
the end according to actually stop the
methods to do this as follows to give a
duration you simply need to say - T
followed by well how long you actually
want your video to be to specify an end
time you're gonna have to say - - and
gif well the end time so why are there
so many different ways of doing things
well as it turns out there are very good
reasons let's first talk about using
output seeking and that is where we
actually have the seeker part of the
command come after the input file
specification what this actually means
is ffmpeg will open the file at the
beginning and actually waste time
decoding the first 14 seconds while not
doing anything that is why when he
actually make the command call you
realize that the command line sort of
sits there
apparently idle for a while before it
actually starts doing the encoding so
come on light isn't actually being idle
it's just basically sitting through the
first 14 seconds of the video the
advantage of doing things this way is
that ffmpeg knows that this is the 14
second mark as a result you can tell it
to actually go to the 18 of second and
it will know what you want
compared to be hey VI we've seen here
two inputs seeking now an input seeking
remember that we actually specify these
fat points before specifying the input
fault when we do things this way ffmpeg
knows to jump directly ahead to the 14
second mark then of course means we save
some time but there is a tiny drawback
in a sense that ffmpeg actually thinks
that well the video it has thoughts at
here it recognizes this as zero seconds
which is why we can no longer actually
say we want to cut to the 18th second
the 18 second is now a completely
different place in a video so that's not
going to work instead we are restricted
to being only able to specify a duration
in this case of course we only want to
cut out four seconds which is why we say
four so yeah as a very quick summary of
what we've just said using input seeking
as fast but we're restricted to only
cutting by a duration using output
seeking is slower but we actually have a
choice whether we want to cut at a
particular time stamp or if you want to
cut by duration which is still of course
accessible all right before we wrap up
let's actually take a look at how we
want to join multiple videos together
using what is known as concatenation
again concatenation also has two methods
one method using a follow list and one
method using a complex filter let's take
a look at a full list first essentially
your syntax now look something like this
you have to say - F concat and your
input becomes a text file containing a
list of false instead of the actual
files themselves your text file needs to
look something like this
every line needs the start of the word
file followed by a fall name there can
also be a fowl path specified here both
absolute and relative file paths will
work the alternative is to actually use
a filter now this sort of works you know
as you would expect you'll have to use
the - I switch to bring in as many files
as you need and then you simply have to
use the concat filter and of course
specified the relevant input streams to
get ffmpeg to concatenate everything
together you can specify as many inputs
as you want you'll of course have to
expand upon your list of input streams
and you also have to tell the concat
filter how many inputs they're up by
actually using the end parameter and
setting it to the number again
concatenation using these two methods
actually have their pros and cons I feel
that the file list method is actually
more convenient because you can easily
generate a list of files if you want to
use the filter method in a batch context
you're going to have to sort of jump
through more hoops to generate a proper
command
unfortunately the file list method
actually has a drawback and that is in
the fact that you do actually have some
codec restriction
in fact all the files in your file list
must have similar codecs before this
method can actually be used compare this
to the filter method where this actually
doesn't matter however restrictions
still apply across the board your input
videos actually have to be of the same
physical dimensions there some other
attributes as well that matter for
example the pixel aspect ratio also
matters and I believe the free read also
matters as well so yeah whatever the
case is
concatenation has its fair share of
limitations and you have to make sure
that all the restrictions are being
followed before I should be performing
your concatenation so yeah if you've
ever needed ffmpeg to do something more
advanced or more complex for you well
you've just seen two different tools
that can really help you with that
anyway with that sit that's all there is
for this particular episode thank you
very much for watching and until next
time you're watching 0-6 watts UTV thank
you very much for watching if you like
this video consider checking out the
rest of my work on my channel
alternatively you may be interested in a
playlist of my earlier work on computing
and computer science topics if you'd
like to show me some monetary support I
am on patreon you can find a link to my
campaign in the video description of
course you can simply like this video or
leave a comment I'll be sure to respond
as soon as I can to keep in touch with
my future uploads do subscribe to this
channel and for even more updates check
out the official Twitter account for
this channel at 0 6 1 2 TV thank you for
your support
Hello this
video will focus on the
the installation program
FIT
this program is very
expressway
and it works with
the command line
it is designed to
with video
pass on the
download the address
program
jump
download
is
automatically
We need to wait
download program
our downloaded
razarhiviruem it
archive content
so go start
My computer
here vc
the root directory
create folder
We call FMP
copy content
our archive many
created folder
grass close
then proceed
start
properties computer
additional
system settings
variable should be
We find a string patch
click to change
and here we must all
only register
the following line
lying
then
click ok
another wiring
now need
check
program correctly
Whether it is installed
We call in command
row
check to start
version of the program
the most simple command
FMP up version and ash
and we see that everything's okay
program
installed
correctly
what evidence
message output
I did to you in
we can still
type the command FIT
dash l space
If you have a
some problem
probably need
restart
system
or check
all environment variables
yet see you soon
mashkov calm only fear I want sure how
to download install ffmpeg for Windows
now it's ready to do is go to this
website here ffmpeg dot seven know.com
force ability for pronounce that right
and I will put this link in the
description so you don't have to type it
out just click on it and what you first
need to do but what you need to do is
find your operating system here you have
a 32-bit or 64-bit and make sure you
download these static ones so I'll
select your operating system well the
the commented bit version you're using
and using 64-bit so I'll click on this
one and wait for this to load and you
should get a download started here it is
in 7-zip but um yeah and you know you
can use WinRAR to open seven dip so just
wave let's download once that's
downloaded just open it up and it should
be done in a few seconds
okay here we go tomato a smaller hears
ffmpeg and you get some files here now
what you need to do is go to and your C
Drive and create a new we can put this
anywhere but I just like to put in C
Drive create a new folder and call it
ffmpeg or you can call it whatever you
want but and a fan pipes relevant to
what we're doing in that folder
highlight all these from the and will
these 7-zip audio bin bar all the
downloads
you've got highlight all these and just
drag them into the ffmpeg folder that
will extract them into there and now we
can get rid of the downloads and no I
now what you next need to do is you can
get your closes down them and and go to
start right click on computer and click
on properties and you'll get this go to
advanced systems system settings on the
left side and then click on environment
variables then on this top new one here
click on the new bottom and then in the
name type path and in the variable name
and put it to the bin folder of that
ffmpeg folder so you will see by / FF
and peg box lashed a bin m and click OK
and then ok and then ok again and and
that's pretty much it you've now got
ffmpeg installed on your computer now to
test this if you type if you go to the
command prompt and type FF and PEG -
version if this comes up with a lot of
information then its installed correctly
if it comes up to saying it's not
recognized as an external batch file or
whatever and then it's not works if I
click enter as you can see and I get a
lot of information up here and that
shows that ffmpeg
is installed on my computer so that's
how to install ffmpeg it's actually a
lot easier than it people are making out
to be
and some thanks for watching and I will
see you next time
all right for this video I'm going to
show you how to stream 2 streams website
using ffmpeg so the first thing you're
going to need to do is have a build of
ffmpeg on your computer
so we'll open up a version of Google
Chrome or Mozilla or whatever you prefer
and search for this 0 no ze RA n OE
ffmpeg and the first thing you see
you'll probably want to click on so
build there now in here when you see
this main page make sure you select a
version that is stable the correct
architecture for your computer and then
static so once you have all that click
download and you'll see a little timer
or your download ticking off there the
next thing that we're going to want to
do is to create a spot for this ffmpeg
so since already have one I'm going to
delete it and create a new folder called
ffmpeg I already had one sense already I
was already testing ffmpeg but since you
will be installing ffmpeg for the first
time go to your C directory or your
local disk and create a folder called
ffmpeg once you do that you can enter
the folder and then click downloads and
then download that version of ffmpeg r
click on that version ffmpeg that you
just downloaded and copy it once you
copy you can go back to this PC local
disk and the ffmpeg folder that you just
created here you can paste that and I'll
paste that whole zip folder in a
previous video I
you how to install 7-zip if you don't
have 7-zip Windows has a system built-in
that you can use to extract the folder
[Music]
once you finish extracting the folder I
like to go into the folder until I see a
bin doc license and pres presence and
copy all this into the top level or the
folder ffmpeg so that everything is up
here and then I delete these two folders
that I just created so now what we're
going to be using is the ffmpeg exe
application right here to get to that
I'm going to hit the start button which
is this button down in the bottom left
[Music]
which can't be seen on the video I guess
and type in CMD CMD is the command
prompt for Windows and once you're in
the command prompt we need to get to
that ffmpeg folder so in command prompt
you can type in dir or LS on Windows 10
to list the folders Arden area for this
one we'll be doing dir we'll want to
back up a few directories to get to that
folder so we'll do CD CD dot dot and now
we're at the root directory or where we
can get to that folder so if we type in
dir will see that our folder is on this
list now we can now do CD change
directory to ffmpeg and then enter that
folder and then we'll look in here and
see that there is four folders right
there plus the two hidden will want to
enter bin and now we'll see that we'll
see ffmpeg exe so now that you have this
point
you'll need to type in the ffmpeg
command to stream your data out to
streams website what you're going to be
streaming on is called a rtmp streaming
connection and each group will have
their own rtmp key that is given to them
by stream so that they can stream to a
specific and their own personal player
[Music]
you'll see in the command that I'm going
to paste into command prompt is going to
be missing a vital part so in command
prompt to paste into it once you've
copied your streaming info or the ffmpeg
command you'll right click in the
command prompt to paste everything back
down you'll see that at the end of this
command here there is a
suspicious-looking little bracket right
here this is where your rtmp key is
going to go each group will each college
will have their own college in high
school will have their own rtmp key that
is specific towards that group when you
use that RTMP key it signifies where
you're going to be sending that video
that is what you'll replace this bracket
RTMP key here bracket with the one that
you get from stream so I'm going to pull
this off of this window and type that in
real quick
[Music]
so once you start streaming you'll see a
window with a bunch of warnings this
warning is telling you that the
Raspberry Pi video does not have the
same timestamp that
ffmpeg does this is not a bit warning
that you like to be too concerned about
so I would just ignore this if I are you
but in this command you can see the
video stream on the ground station side
so we can pull it up real quick here
where we're going to be looking at is
our local address which will be art RTP
colon slash slash local host :
4000 slash once you type this in hit
enter and it will pull up the stream
that you're streaming through ffmpeg now
you're looking at this here you can also
go to the particular site where each
person or each group will be streaming
their video to
[Music]
for this demonstration I'm just going to
pull the generic sight which is going to
have listed all of the different groups
kind of redefined this next Tuesday and
you can pick from each one so as I'm
pulling this up we'll see that we're now
streaming to the website and at this
point you have used ffmpeg to stream
from your computer out to stream's
website and that'll be all
[Music]
welcome to a new
ask portal.eu video today with the
ask how do I install ffm pack under
windows ffm pack is a pretty
powerful tool to take you to such
videos into another format
can convert or audio from
the video gets out there but
a total of as many
manipulation possibilities that I you
not all can result in video on
this is actually not at target
I want to show this videos here
how windows is set up so
can that ffm pack on the console
can call as soon as possible so
not every time the path to f amp exe
Specify file I have to think sometimes in
normal case, the traffic should in
linux environment used
but perhaps to get him some day in
the situations where you at all
windows would like to use
to you go to the page ffm peck
there is a download area
since there is for example the
downloads for linux and there are
already a combined version of the
windows picture on an external page
which is linked here
there are basically taken two
selection options once the 32 bit
version and once the 64 bit version
I now here in 64 bit system
present was interested in the 64
bit version
but it would also be possible at any time
the whole with the 32 bit version to
make or both parallel to
install will now very small
bit different that gets you
certainly so back
Unfortunately, here are the people of the
page for 7 decided to zip archive
use
perhaps supported or
operating system of home-made not to
it may be even possible to advance
install 32 or 64 bit version
but possibly also supports already
existing program and all her
can unpack the already
I have in this case now the
64 bit version is already loaded
this could on the desktop with me
There are somewhere else and with
the right mouse button I'm So
previously installed, there is the
possibility to unpack all here
It is a new folder created there
then there are four directories
So documentation licenses and presets
something and still some readme file and
interested but here
the folder in which the file ff mpeg
there is at issue here now
going
theoretically could already all
functions of ff mpeg therefore use is
nothing more required us going there
yes here rather that I comfort
can indeed show times that belongs
now is not the device itself so
need not necessarily be made by
that you can already use the whole
if I do so here in the console
Go to the directory and desktop
navigate located in the now these file
I could say now ffm pack
exe point and I let the example
Simply display the version
is works great disadvantage
of course, that I either ff mpeg
dot EXE file always in a
must have exactly the directory where I
wants to run or stop each
always specify the path to where I
Now for such a directory before
go and the same four
Of course this does not work but
that was now just a test to show
that in theory already works
so if I rich that and her that
want to use once you can the love
even so we do want now
somehow windows tell where ffm pack
lies and the whole even before that in
copy a corresponding folder
Plus we are best in
program folder of here in the computer
and programs is for 64 bit or
x86 32 bit because I 64 bit
have loaded version I choose
programs and lay there a new
folder called ffm pack now only times
pure and I all these
folder I have unpacked first
Move over here or copy
someone just wants
I have now so in here
moved and now have as I said
We windows somehow we tell
have ffm pack installed or
we have the files ever
somewhere copied and around the
prepare with, we first need
a batch file
and which one creates by the
for its editor opened the
all according to the batch file stores the
simplicity's sake, I'm doing the whole
talk with the right mouse button
I text document would now but
not have a txt file here but
the batch file is bac and the batch
file shall be called ffm ffm beck bat
steady all know that now
another file ending is okay and
Now we also need something else
write in with right mouse button
to edit
as we say first that we do not
edition wish echo of and now
we have this batch file only once
communicate the path to ffm packs namely
in quotes of vaart here
above you can see already where the
about is this is perhaps
sometimes a bit misleading
clicking here on the little arrow
for example you can see that the
am all in C program files ffm pack
is we simply copy out follows
of even a sign and copy
now in filenames also a
Thus we have the full now
Close to ride ffm pack file
again followed with quotes
star percent of the star percent
moves actually just that everything was so
in the batch file comes in to f ccd mp
EXR is forwarded
then we are also ready already
Save the record from close it
go here into the main index
system partition programs ffm pack
and here draw the Bätscher some purely
move or I copy move
it is now easy
Then she lays there now we have the
say okay system we have now
here this batch file and where we say
that the issue here under windows
computer right click Properties
and there is now the point
Advanced system settings
there are now several riders
expanded up here we are interested
But now times you should now have a
other windows version have sometimes
you know not just how to go
coming or now there are also
no more state
simply could you also
windows-key followed by more pressing
to come to precipitate and then
a control I have now
ever entered control tmc pl ok
and already landed in the
system properties and instances wide
go extended
there there is the point
environment variable and the subambient
is thus in the system variable
I is a value-park and there stand
Now a lot in there that is unfortunately a
bit confusing
so I will now just
out little head only
need clarity actually
we attach now only back here what
but in order to better see what we
do I open again now that
notepad copy the Rhine water rat in it
stands
okay because we now see there
various entries that entry
is separated by a semicolon first
entry second entry, and so on
third entry
We now want an additional
Create entry to we need to
times seven colón write there and
Now we need the path to ff mpeg
directory in which this world
stadtteil is
we now just here
copies of this path it draw program
files ffm pack in this case for the
guests can one of my still here
Attach this and that it was actually
already
so we have now in the end it can
with column simply write only this
worth appended this path
and that's enough now we have the
naturally made in this text file
what actually not so
is provided only to show the
so we copy everything in this
field purely
just to show it again I there which
did exactly that is now
perhaps with the text file a
bit confusing
I now break everything again from I
've here this path where my
bachelor share tight and I need
now environment variable simply here
right then I see behind the very
circuit only colón and I much cold
the parties
okay okay okay includes all
I need not here yet
Once the console open that would have
but now even restart so that
is also actively give back to cmd
and let's see if we now just
ffm pack can enter so wonderful
So when he does not care now
just are you can specify the stop
I go to such only to test times
in the folder desktop and there in the
folder music and look at what's on
in it and there is now a file
inside of creative commons artists and
yes I want it now simply
to send someone
of the example does not recommend this
has now just so we're
already done can only be explained as to the
which are already finished effect
only works now in order again
to show for what you pack ffm
can use any
we now have in the music file and
we the light here in mpo format
ac and we would like that now like
somehow NEN buddy send a
has very poor management and internet
what is absolutely in a small file
would like to have size and its player
even mp3 can or something, and to
we could now easily here flv mpeg
Want to give one have as input
The file that we have and to act as
output we simply say here please mp3
but add mp3 you currently on that we
have a frame rate for example of 464
want to confirm all it takes to
a small moment until all here
has been processed and are already
ready yes we know now folder music
look, we have next to the file since the
previously there was also a file here
Please can of lins trainer david and
then repeat the whole
I hope this saves you a little
time in future and would be happy
if you the video further opened up
next time
hey everyone its Nick coming to you live
again from Mountain View California
today I want to tell you about one of my
favorite open-source command-line
utilities for transcoding and working
with audio and video media files called
ffmpeg so ffmpeg is kind of our Swiss
Army tool that we'll be using for
transcoding various assets so the first
thing that's a little tricky is kind of
getting installed correctly so it does
have a lot of external dependencies and
I will link below in the video
description links on how to get
everything installed and set up
correctly the second thing is once you
have ffmpeg installed and you can run
from your command line the first thing
to learn about ffmpeg is using the - I
flag so with - I you can specify as an
input file and it will tell you all
kinds of information about that file now
what I dislike about ffmpeg is that it
always dumps config information about
how it was built so what we can do is
use the hide banner flag and that will
prevent this banner from always being
displayed now what's great about using -
I an - hide banner together is given a
video file we can see information such
as what's the duration of it but then
for the various streams that are within
the file
what kind of codecs they use so the
first thing to note is that the file
extension the file extension is kind of
a misnomer on a file doesn't actually
changing the file extension doesn't
change the underlying container that's
used nor the codecs that are used for
the various streams so a container is
what's important is kind of metadata how
the bits are packed and the codecs
encode how the audio or video streams
are so for instance on this file we can
see that stream 0 is the video codec and
stream 1 is the audio codec and what
those codecs are so if we want to figure
out what codecs are installed ffmpeg
supports we can use the - codecs flag
and I like to pet pipe this into less
and so it'll print a really neat little
table that kind of shows us whether or
not codec is a video codec or an audio
codec and then whether or not we can
decode from a given codec as if that
codec was an input and if we can re
encode into the the new codec in that
process of decoding from one codec and
Riaan coding into another we call those
two together transcoding so this will
tell us whether or not we have these
dependencies installed correctly and if
you're missing something that you think
you should have double check you may
have to reinstall a rebuild a fan peg or
some of its dependencies so the easiest
thing to do is let's say that we want to
just transcode a file so given say an
MOV file we want to convert to WebM that
we can play it in a bunch of web
browsers simplest thing is - hide banner
- I then put filename move and then the
final argument is just the output file
name dot WebM in ffmpeg smart enough -
from the file extension guess the
container and guessed same defaults for
the audio and video codec while that's
transcoding we can see from the stream
mapping output what the input of stream
0 the input codec being h.264 and the
output video codec for that stream being
vp9
and for the input audio codec being AAC
and the output audio codec being opus so
let's say now that we want to have finer
grained control and explicitly control
what the output video and audio codecs
are we can use the - C : V flag followed
by the name of the output codec for
video or the - C : a flag to change the
output codec for audio so this gives us
fine green control over say for instance
we're not happy with vp9 as the video
codec in opus as the audio coppa the
audio codec we have finer grain control
and we can specify it note we actually
want vp8 a little bit older codec we
want vp8 for video and Vorbis for audio
for instance now let's say that you have
of a move file that's h.264 and AAC but
you want it to be in an mp4 container
rather than a move container what we can
do to speed up the process is tell
ffmpeg that we want to copy the input
streams byte for byte and just change
kind of the metadata of the container so
we can use the - C : V and specify the
value copy and - C :
a and specify copy as well and this is
much faster because it's not actually
doing transcoding instead it's kind of
stripping these two streams out of the
input move container and dumping them
into an mp4 output container finally the
last thing that I think is really useful
is ffmpeg has a really powerful stream
multiplexer so the - map command
followed by the input stream and then
colon separated and followed by the
output stream number lets us kind of
rearrange exactly how we want our
streams to be ordered in an output or
what we could do for instance is given a
video file that has audio attached we
could say we want to strip out audio
which is the example that I'm doing here
so the map command is really powerful if
you have a file that came from someone
else and maybe it's a little bloated you
can trim down the file size a little bit
by stripping out some of the streams
that you don't need or you can add
additional streams maybe different
languages or stuff like that
so the - map command is really powerful
and if you want to learn more about
ffmpeg it has a couple of command line
flags there's - H to learn kind of the
basics - H long it prints out a lot of
output and - H full which prints out a
lot of information for working with
ffmpeg so it's a really great tool I
recommend it kind of today we went over
the basics of just seeing how to get
started and we should have kind of the
basics that we need from transcoding
from here on out thanks and let me know
what you thought of the video see you
next time
all right what's up everyone so in this
video we're gonna make a video slideshow
with ffmpeg without using any kind of
video editing software so you might want
to do one of these things let's say if
you you know get back from a trip and
you want to make a slideshow with all
your photos or you know let's say your
son is having a graduation or something
and you want to make some kind of
slideshow with that you can do this
really easily just with ffmpeg just with
a terminal commander too so in this
video I'm going to show you how that
would generally work so as an example in
this folder I have a song file and the
video is gonna be set to this song it's
5 minutes and 44 seconds and in this
folder I have a gajillion pepe the mean
frogs so what we're gonna do is we're
gonna set we're gonna cycle through all
of these memes and we're gonna have them
set to this music and it sounds like
well they're 500 something of these and
if you have 500 something photos from
your trip or something like that it's
way too much of a pain to put them all
in a video editor normally so how do you
do this so if you bust open a terminal
first off make sure you have ffmpeg
installed so it's basic I'm pretty sure
it's installed by default on basically
every distro but just make sure if it's
not and it's usually the syntax works
like this you say you know hyphen F and
this means for some kind of input so it
could be something like x11 grab which
is like grab your screen and then you
specify an input blah blah blah but in
our situation we're gonna do something a
little bit different that is ffmpeg has
this nice little thing called image to
pipe and it takes a certain input it
takes - as an input and what this means
is instead of you typing out all the
files that you want all these all the
pictures you want what you can do is you
can actually just use cat the command
cat to pipe all of the pictures you want
in so I am gonna take all of those Pepe
memes and with cat I'm gonna pipe pipe
them right into FFM
okay so we have our input and then we're
gonna set an output we'll just call it
output not in kV and that's gonna be
that and so this is gonna basically what
this is gonna do is it's just loading I
mean it's really just making our video
right now so just as a just sort of as a
caveat if here I have only P&amp;G files now
if you have P&amp;G in jpg you might want to
convert one to the other and that's
because ffmpeg has some trouble dealing
like if you have inputs of different
types it has some trouble dealing with
that so you might want to use the image
magic convert command so let's say you
have you know you know picture jpg you
should try and convert it to picture dot
PNG first so just make sure all your
files are PNG or all your files or are
jpg and you should be fine it should be
fine
don't try and convert them just by
renaming them that's not gonna work the
way you want it to so I think this
should be about done all right hurry on
up I put too many memes that's the
problem that's the problem with my life
sometimes too many memes hopefully we
can go ahead and try it so if you open
it up okay it says it's truncate it'll
be done in a second yeah it's done okay
so if you open it up you'll see it's
cycling through the images as quickly as
possible now this is not what we want in
the end we want them to be pasted at a
reasonable pace so what it's doing now
is it's just giving each one of them one
frame and I think ffmpeg by default goes
by something like 23 frames per second
so that's not exactly won't lonely one
so let's change that so here's our last
command now what we want to do is set a
frame rate okay so we want our frame
rate now notice I said before I will
have a song that I want to set this to
and my song is what was it 5 minutes and
44 seconds I think the so if we do the
math of that what is that that's
344 seconds right so what you want to do
is let's say I have 526 images here just
divide 526 by 344 and this is gonna be
the frame rate you want if you want all
the images to match you know with the
length of the sound the song so I'll
just say that's you know 1.2 or 1.5 3
and then I'll actually well before we do
that I also want to go ahead since I'm
already gonna have this at the right
length we might as well put in the
actual audio file so just don't get
confused by oh listen text all we have
is frame rate image to pipe that's how
we're getting our files and specifically
through this - and the last thing we
need is we want to have this actual song
in here so we'll say but it will just
say F victory dog and then we'll say no
actually we don't want no if we want I
don't leave for an input that's only if
it's yeah that's not the same thing and
then the other command we want is a
codec copy and this just means take the
audio codec of you know what other
whatever ever file we have so I'm gonna
go ahead and run this oh yeah is trying
to replace the file before you can get
it to overwrite just by putting in the Y
tag or you could just delete the file
but whatever so we'll let that run for a
second so anyway I drug this out a
little longer than I needed to but
really all you need is that one command
so you specify where your images come
from you cat them in the ffmpeg then you
specify your frame rate and you just
have to do a little bit of math to get
that and of course you give the input of
the song now when that's done we are
going to have a a movie file which is
just the length of this song that has
all of these 500 or so peppe's in it so
we didn't have to do
any of the work no problem whatsoever
that would have been terrible to do to
do otherwise so now I'm just stalling
for time because I don't want a video
edit because I don't want to edit this
out of here all right hurry on up oh
maybe I can maybe we should go ahead and
update why not you guys want to see me
update arch well technically it's
parabola here but we've got some kind of
error there it's almost done
ah I see that's the thing about video
editing like video editing takes like 90
percent of your time so I don't like to
do it I swear it's almost done I should
have told you a joke or something oh
geez all right it's almost done trust me
trust me on this I have too many peppe's
that's the problem all right it's done
it's actually done now okay so now we
have our final output and I can click on
that you probably can't hear that
because it's just in my headphones but
yeah I think I'll actually post this
output you know just because you know
you might want to see it go ahead and
update this so yeah I hope you learned
something again let me show you the
command to do the whole thing
so just cat peppe's or cat whatever file
any kind of if you're you know whatever
you want into ffmpeg with a frame rate
with the the audio file and that should
be it that's all you got to do so anyway
thanks for watching hope you learned
something
I want to show you some of the things
that have been useful to me
we'll talk about basically about the
program in general and then most of the
presentation will be examples it's an
open source project
its main executables are ffmpeg
that's for converting video and audio FF
probe getting the characteristics of
media files containers and streams and
FF server which streams video and audio
you can also incorporate ffmpeg into
your own projects they'll give you a
native executables so soo and DLL files
it runs on all three major platforms
Windows Linux and OS X it's it for
introduction all the rest will be
examples it's pretty common you might
want to extract audio from a video file
in this case we could extract an mp3
from an mp4 file so on the command line
you specify ffmpeg - I and then your
input file which in this case is the
video file and then your output file
there's no corresponding - oh like there
is - I anything on the command line is
not interpreted as an option or an input
file is considered the output file in
this case the audio is transcoded from
AAC format and the input file to an mp3
format in the output file and I'm gonna
start introducing some of the
terminology that's used with ffmpeg and
containers and streams in general so
technically imagine that mp4 first list
D machst into its video stream and it's
audio stream and then the video stream
is dropped the audio stream is then
decoded from an AAC format and then it's
put through a filter which encodes it
into an mp3 format and then it's must
back into the container format of mp3
it's good to know these these terms like
containers and streams and formats
because it comes up a lot on the command
yeah yeah is it none of those Omaha
Yokota's like hundreds of them if you're
interested I can I've got that output of
all the audio codecs that it supports in
the video codecs and containers to some
formats so this is just a really simple
first example a couple times in the
previous slide I mentioned that I knew
the audio stream was in AAC format you
know so how do you know that the audio
stream was in AAC format you can use FF
Pro for these kinds of queries it has a
lot of the same command-line syntax as
ffmpeg they share a lot of the same
options so you can you can call FF probe
- I and then your input and here's the
relevant out output from that that
command it tells you your container
information up here at the top that the
container was detected to be of type mp4
or m4a those are synonymous tells you
the duration of the input file
it's bitrate and then we get down into
the streams the video stream and the
audio stream the video stream is in a
h.264 format with 1280 by 720 size per
frame audio stream is in an AAC format
so that's that's how I knew in the
previous example the audio stream was in
the AAC format something else to get
used to with ffmpeg
is the way that streams are identified
so it says stream pound zero colon zero
and stream pound zero colon one what
this means is the zero means the first
file 0 and 1 are the stream numbers
within the input file that becomes
relevant because you have to identify
what you want to do with particular
streams or particular input files some
other things to notice about the audio
stream is that the sampling rate is 44
kilohertz and as a preview we can have
more than one input file on the command
line
so another thing you might want to do is
it's just copy a stream out of an
existing video file a common thing to do
is copy the audio out of a video file in
the previous example we transcoded the
audio stream out of a video file we've
went from an AAC format to an mp3 format
you might want to just just copy it
because well you could introduce losses
by converting from one audio stream
format to another and you just you just
want a copy so a copy can be a whole lot
faster this is how you could just
extract an exact copy of the audio out
of the out of a video file as with the
previous examples the input file is
specified with the - I option and then
VM means video and none or drop the
video we don't care about the audio ca
means C means codec a means qualify it
to the audio stream only copy is the
it's the codec so we're we're saying we
want to copy the audio out of the out of
the video and what this results in is
just a bitwise copy out of the video
input file this results in a very very
fast rip of the video file to an audio
it's a it's a bit of a misnomer because
nothing is being encoded it really is
just a bit for bit copy you may want to
reduce a media file size because it's
too big
to put on your storage or to stream so
one way you can do this with with audio
is to reduce the bitrate so again we
specify the input file with - I a be 96
K a means audio B means bitrate in 96
okay means 96 kilobits per second why
that's relevant is because there's a
couple different ways that you can
specify numbers to ffmpeg a lowercase K
means bits per second an uppercase K or
uppercase M means bytes and then you can
also slip in an eye which means use 1024
instead of 1000 since we're decoding the
audio we have to re-encode it and so
this is much slower than just a rip of
the audio stream it's much slower than
using the copy codec the output file
name determines what kind of codec will
be used you'll see come into play a
couple more examples bitrate bit and
sampling rate sometimes are confusing to
people so if you imagine bringing up
this audio screen and something like
audacity where you can see the time
amplitude plot your bit depth would be
the number of possible values on the
vertical axis your sampling rate would
be the time between samples on the
horizontal access and then the bitrate
is the combination of bit depth and
sampling rate so effectively we're
changing the bit depth because ffmpeg
won't change the sampling rate so you
may have a long video clip from which
you want to extract a certain clip a
short short clip from a bond clip so you
can use this kind of a command-line
syntax to get to get a short clip out of
a long clip so in this case I had a
blink 182 Las Vegas concert and the song
I miss you starts at 13 minutes and 38
seconds into the concert and goes for
two minutes we'll say the - s s says for
the input only start passing frames from
the input to the output at 13 minutes
and 38 seconds into the input and - T is
a duration how long do you want to pass
frames from the input to the output
we'll use the copy codec again this time
with a shorthand
there's no qualifier on the
- see so this is the same thing as
saying copy the video copy the audio and
that should say apps for subtitles I
want to show you something about the
about this clip because it'll come up
again so it's completely blank at first
I don't know if you you saw that the
reason for that is there's keyframes in
in the video and where I specified 1338
wasn't rate on a keyframe so we picked
up some difference frames which caused
that which caused the beginning of the
video to be messed up and that's called
GOP or group of pictures group of
pictures specifies how often you get a
full frame versus a different spring and
I'll show you some ways to to deal with
that kind of issue but it was a good
good example to get question for you how
much you're gonna get into later on does
that depend upon the source the video
type that you have yeah that's
definitely so like an API equality
versus an MPEG quality
yes yep you may want a way to quickly
review a very long video one way to do
this would be to take video snapshots at
a periodic rate say once a minute or
however often you need to do that here's
a way to do it again I use the same
concert video file specify the rate at
which the input will be processed that's
specified in Hertz so a point of one
Hertz means every 100 seconds it'll pass
and frame from the input to the output
and it knows just by the dot PNG
extension how to encode that output file
and you get like a printout style
string here and D resolves to the output
one-up number of the frame so you can
get like hundred frames out of those so
go real quickly I have all the files
here so if you want to see any
particular example run I can run it but
I figured it would be too long to run
all the examples so in previous example
we showed how you could reduce the an
audio file size by reducing its bitrate
so one way that you could possibly
reduce the size of a video file is by
reducing its resolution say from 1080 to
720 this example we specified the VF
option V stands for video f stands for
we're gonna do a filter on the decoded
frames the name of the filter is scale
negative 1 means keep the aspect ratio
from the input file and so this is width
and this is height we keep the aspect
ratio from the input file but we want
the new height to be 720 pixels this
does involve re-encoding the input
because we in order to get those frames
to put them through a filter we have to
decode the input so if you decode it and
you've changed the the frames you have
to read and code it so it will be much
slower than using a copy codec it
illustrates some some defaults that
ffmpeg
I specified two two fathers write the
input file with the dot MOV extension
and an output file with the not MOV
extension so you may think initially
that they would have the same kind of
audio and video streams but it doesn't
but they don't this was taken with a
camcorder which used a different kind of
audio stream then ffmpeg uses as its
default when you specify a dot MOV file
on the command line so it's kind of
hidden in here that not only do we have
to transcode the video frames because
we've performed a scale filter on them
but also it transcoded the audio frames
because there's a default with ffmpeg to
have the AAC format within dot MOV file
we can we could change that to keep the
original audio by specifying - C : a
copy to use the copy codec for the audio
input something John would like animated
gifts he posted at Google+ that he hates
on that so you could create a animated
gif this is just like taking periodic
snapshots so again we specify the rate
at which the process the input and
really so the command line is identical
to taking video snapshots except we've
specified a gif file as the output and
we didn't put any kind of printf format
string with an output file so all that
all of the frames get put into a single
animated gif a lot of times you want to
take an audio file and replace the audio
in a video file so you want to merge you
want to merge a movie with a different
audio stream so here's here's a way that
you can do that and it's the first
example of specifying two inputs on to
the ffmpeg command line so we specify an
audio revolution mp3 and video my son
playing soccer we say we want a copy of
both the video and the audio
the shortest option says cut off the
output to the shortest input so one of
these is longer than the other soccer is
longer than the audio so we'll just cut
it off when the song ends and again this
illustrates some defaults in ffmpeg that
you need to be aware of in this output
file we get the video from soccer and we
get the audio from from the song but why
didn't we get say the audio from my
son's locker or why don't we get both
audios you know how did it know which
audio to take there's some defaults that
it uses in this case it's the audio with
the highest sampling rate if there's a
tie then it takes the audio that was
first on the command line there's some
ways that you can get around this with
for instance the map option if you want
to override the defaults and specify
which audio or video should be used in
the output file quick way to make a a
ringtone for your Android phone uses the
same techniques that we had done before
to make any audio file you need to make
it less than 30 seconds and then copy it
into SD card
music ringtones so a lot of times you
have a bunch of input files you want to
concatenate them all together this is
how you can do that use the F option on
the command line which again means
format the format is cat which means
concatenate usually you have like a
whole directory and you want to put
these all together so you put them in a
file with this this format especially by
specify that file on the command line
and usually you'll have a codec of copy
and it'll just concatenate them all
together into one huge output file
here's some PowerShell for when I had to
do this you know you don't really want
to be typing this in by hand especially
if you have some programmatic solar
order
to do so that powershell will create
this file for you
so this copy wouldn't work if you had
multiple codecs would it just fail
because you're trying to copy the same
input output I'm not sure actually I
I've already tried it with the same kind
of streams and input files I'm not sure
how you would do that whenever transpose
oh yeah we have to transpose for sure
and if it if it worked if - of concat
even worked with inputs of different
types okay so I've been referring to
container streams and codecs a container
is pretty much synonymous with a file
format except in the case of streaming
so a container is how you can put
multiple streams how you can store
multiple streams together yeah for
instance video and audio for subtitles
so typically that itself to be a file
format streams are the media components
the the video the audio subtitle see
some common video streams are h.264 and
mpeg-2 some common audio streams are mp3
and AAC put it all together containers
are D most into streams and then the
streams are decoded into frames and
that's where where your filtering
happens then the frames the filtered
frames are encoded back into streams the
streams are MUX together back into a
container which is usually a 5 GOP I
mentioned before stands for group of
pictures so in a video every so often
you get a full frame for modern modern
video streams every so often you get a
full frame and then subsequent frames
are some kind of differential frame
because most of the pixels enough and a
video frame don't change from one frame
to the next so it's inefficient to keep
on specifying the full frame there's
different kinds of differential frames
here if you're if you're interested but
basically the GOP specifies at what
interval are those full frames included
in the output a larger GOP means a
smaller file size typically because
you're not specifying all the content
all the time
but then seeking it can become difficult
if you remember when I tried to get a
song out of the whole concert from a
previous example the first few frames
were blank and it's not like that in the
output file so there's some playing
around that you need to do with GOP
depending on what your use case is
general tips for using ffmpeg the order
of options matters a lot for instance if
you put the SS option on the command
line in front of one input file or in
front of another input file or at the in
front of an output file they can be in
completely different things so if you're
having a problem where the command is
not working like you I think it should
be make sure your options are in the
right place you might want to use ffmpeg
and programmatically like kick it off
from another program and you don't want
all the licensing stuff to to be
captured so you can use specify a lot of
level panic will make that all go away
that's why and n have to do with if you
specify an output file that already
exists you want it to overwrite
automatically or never never overwrite
and cancel the commands you can get the
help with by specifying - H and then I
recommend just redirecting that to a
file and you know looking at it and a
text editor instead of the command line
any questions if you wanted to use this
like including like an app or something
one of the
with certain video codecs and thick like
h.264 some of the MPEG codecs
technically you have to pay a licensing
fee per CPU i think it's only like
$1,000 so if you were gonna use this in
a production that'd be better
just pay I would say pay a thousand
dollars with a CPU that's gonna be doing
doing your processing but I don't know
if any other licensing considerations
definitely look at the help from - H and
then there's the best best documentation
is right on their website I wouldn't I
mean I've really looked around a lot and
I haven't found good documentation
anywhere but their website ffmpeg work
thank you this is actually not the title
of this talk this is Python in video
what we can do for you there was a
little bit of technical difficulties but
that's settled now so what I'm gonna be
talking about here today is our two
tools or a lot of tools but mostly
ffmpeg which is a tool that people can
use to transcode video and to connect
video into a fixed video and I'm also
going to talk about how you can use
Python and the libraries that exist with
Python to do awesome stuff with video so
a first of all big thanks to big apple
pie and all of our volunteers all of our
sponsors Thank You Wayne thank you to
everyone who's contributed to the
open-source tools that I use in this
product or project and a big thanks to
Zuko who wrote a movie pie which I'll
talk a lot about and he he's really done
a lot and he actually reached out to me
and he was very nice so thank you Zico
so we're gonna start really basic here
video files um not a lot of people
realize that like what is inside your
video file isn't just like it's like
transparent like it's not just like what
makes up a video file is your container
your codec and your your actual data so
in your container
it has your headers stuff that like
indicates what your codec type is what
um what like library was used to write
this file what settings it has its
frames per second its bitrate all of the
data about the file is contained in the
header and then the codec and the actual
data for the file that's the s2 file
itself that's where the movie is that's
where what you end up watching that's
the group of pictures that's that's
everything so
there's lossy and lossless compression
lossy compression means that we're going
to throw out data for the sake of file
size and lossless compression means that
we're going to keep all of the data for
the sake of quality we'd like to make
sure that all of the data that this
video had at the start is maintained in
whatever the next rendition is going to
be of this file while lossy is like
saying that you want to make super small
so that you can send any ones that it
can be anywhere
so in lossy and lossless compression
there's another sub subset of intra and
Inter coding and Inter coding is
something like a like a like a an h.264
file
it's a lossy compressed file that looks
in different directions
no single frame in an inter file is a
picture it's always be missing some sort
of data and it relies in the entire
string of or the entire sequence rather
of images in order to be made whole
because different parts of that image
are being pointed to on different parts
of the frame but intra compression is
like a JPEG or like a PNG file it's
something that from the start to the
finish you have the entire picture right
there
and every frame is a frame on its own
right so that's obviously a much larger
file size and a file that doesn't really
how will the information in one place
and it it's pointing all over so here I
talked about the different kind of
frames so iframes are the inter frames
those are complete images those are the
the largest part of the file that have
all sorts of data in them that the
mostly picture or mostly color data that
you then point back to or then point the
different files look at that they read
key frames look forward be frames look
in both directions and they look for
different they look for eye frame
use that have the color data that they
are missing I apologize it's 935 I'm
going a little bit too slow or too fast
if I'm thinking it's not making sense
feel free to feel free to stop me so
which codec to choose so I mentioned one
I mentioned h.264 I mentioned that
because it's my favorite and it works a
lot of places if you've ever seen like a
any video on the internet there's a
chance that you've seen an h.264 file
but there's more there's h.264 which is
not a free codec it's got licenses
attached to it that are not exactly nice
its own proprietary there's VP X which
is owned by Google but is royalty free
and is I believe open source then
there's the--or which is a VHD style
free license and the reason I chose
these three codecs to talk about is
because they're the main ones that html5
and that browsers really support if
you're trying to make a video element
for your for your website or whatever
you want to do you can use these and
you'll generally get a working video
element out of it so I mentioned ffmpeg
there's also media info which is a great
tool for inspecting files if you've ever
had an issue where a file will not work
or you're just like unsure of what's
going on under the hood you can use
media info on a file and it will like
basically just read out all the headers
that I talked about at the beginning
it'll look at the container and just see
what's in there and it'll let you know
like okay this is what you're looking at
this is what what's up with your file
and then it's your job to find out
what's missing so a little of warning
sign' ffmpeg has some pretty developed
it looks like it's got a pretty rapid
development cycle so you will find
things that are on the internet that are
not exactly up to date that are not
exactly correct and that use flags that
probably won't work on your version so
it's kind of dangerous to just go and
like Google this is what's wrong how do
I fix it and then use whatever they say
blindly so just a warning
always take the documentation this is
like what your basic script would look
like this script I can't imagine ever
using because all it does is it take the
original make a copy exactly like it in
this way user wastes do that but this is
what it would generally look like and
these are some more flags that you can
use these are like generic Flags that
you can use with like almost any codec
that they'll always work
another thing about if app MPEG is that
because it's using all these different
codecs and all these different codecs
are developed independently of the
project there can be different flags and
different like knobs that you can turn
in different switches for different
codecs so a flag that will work for x264
might not end up working for VPX or OGG
but these are all generic flags that
should generally work with with all
codecs and so here is a way more useful
example this is a this is just taking a
raw input and making to an x264 format
20 to 24 frames per second that is a
typo and um and that would be a output
file so another great thing that ffmpeg
comes with is some really excellent
presets so they when encoding video you
can have sling that goes really fast
that will encode it properly but it will
give you a pretty large file size to
stun a pretty quick job with it or you
can do it very slowly and you'll get a
smaller file that is certainly what what
you want to do but ffmpeg gives you some
excellent preset options whatever you
want to choose because if you're doing
like lossless compression that you want
to then edit on maybe it's okay if you
just do it super fast and then have a
very large file but it's perfectly fine
with what you want it
and the tune option is for more
civically like what's in the video what
you'd like to see in the video so let's
build some slightly more complex
commands so what this does over here the
the pics format that has to do with the
color space of your video um
besides that you ER the raw video this
defines the pixel format
there's RGB and Yub RGB is video that is
defined in the only the RGB color space
whereas y UV Y is um Y is for your your
luminance and UV is for your color your
chroma so it's just two different ways
of displaying video and when going from
the the raw we had to convert then
here's 60 frames per second input file
super slow this flag means no audio this
flag is of your codec pixel format your
right and your output file here is a
dump that we can see from media info
it's a shown that we got the right stuff
ABC that's x264 everything's looking
good right now still looking gravy that
input resolution our aspect ratio frame
rate y UV slightly said from a
subsampling pretty good pretty good
but now let's start doing some real fun
stuff and start building videos with
Python so movie PI as I said is this
excellent library that's come out that
allows you to really do some crazy stuff
I want you guys to be able to walk away
from this talk and I mean even if you
just have two videos you can want to
connect together you don't need to go
looking anywhere to downloading any sort
of like Video Editor you can do it
yourself using Python and ffmpeg so pick
them sell movie PI this is a general
this is from the documentation since
general layout of how it works
some clips if MPEG reads it then you can
use numpy Syfy OpenCV or the Python
imaging library as well as a GIMP and
image magic and a couple other I think
actually think those those dicks are it
but use those all those things to
compose different images to change
what's going on to add some effects to
your video and then the output is all
sewn together with ffmpeg so another
note on movie Pi is that it has some of
the the nicest inheritance I've ever
seen like it if you are looking for
something to just show you like I want
to see like what's a good way of like
using a lot of objects to inherit from
one another and to show you some really
good object-oriented programming like
really excellent I take a look at it
have some like a like a beer or some
nightstand just read the source code
it's really nice and it gives you some
excellent time to like see what all
these different clips do so I say clips
so n would be PI everything is a clip
object so here's like a canonical hello
world example this would just make a
black box that just says hello world but
that's three lines of Python and it's a
video it's a 10 second video that you
got just from real lines plus the entire
library that you imported hey work uh
yeah this is your video the CSS is a
little bit funky with it it's not going
to play but yeah this is the video that
you would create with that so let's take
it a step further than that so you're
making a video and you you want to
generate some kind of graphic elements
why not just make a script to do that
why not let's say you're doing a show
about like celebrities and you want to
discover bunch of tweets together why
other like downloading these tweets like
having a like having to edit these
tweets together and have to copy and
paste text you can just write a script
for that
so again big thanks to Zuko so here we
go this is our array of tweets again you
can see here so the way we pie works is
you import the editor and then from the
editor you can create your clips on it
so if you do come from a world of movie
editing I kind of think of the editor as
like your sequence like your sequence at
the bottom where that holds everything
and then these modules are stuff that
you apply to your sequin arguments too
so so yeah here we go our tweet collect
or our aggregator collects tweet or
tweet in tweet we create a clip of it
super easy and then we put those feeds
together using the composite video clip
which will then hold all of our smaller
clips and concatenate them and write
them out to a file super simple and does
this stuff look at all familiar to you
guys um you'll notice that we use is the
V codec flag instead of C : v4 codec but
it works the same that that flag has
been around longer and it still works as
I said that's kind of like what are the
intricacies of ffmpeg that it's just
been around for a long time it can kind
of do some weird things but yeah besides
that everything else here like the
thighs fix the format everything here is
Nick sent output file like it's great so
this this is an example of like a script
that would take in a quote and an author
and give you back a in a file size or a
resolution also and then return to you a
element of just whatever you wanted like
would like the yellow background is what
I chose and then I chose to kind of have
it a little off-center see if it plays
and then this is a little flat gap that
would take a author and quote from a
post request
and you can feed it from codec and it
looking code for your codec and then
they'll put in your static file and
you'll have it in your context so it'll
just create the file for you I'll just
create the webpage and yeah very very
doable I'm not going to go into how to
do that here but very very doable that
is definitely definitely fun you can do
so this this is yeah this is the video
that would play but the quotes over
there the attribution so okay that was a
big reveal so if you want to think I
made another version of it so that was
like a couple lines this is more
complicated but it just takes James's
Twitter profile picture and makes like a
nice tile on the background and then
gives all those tweets one by one and it
makes a slideshow out of it so yeah
exactly to your point about like putting
a soundtrack over a gift like or over a
string of gifts totally doable and yeah
you can check out my code this is my
github page so if you want to just go to
and take the code is hot link to it and
yeah one of the coolest projects is this
thing well there's two really great ones
right here
so there's video grep which will search
subtitle files and and then create
Supercuts out of that so if you give it
if you ever seen like The Daily Show or
sling where they're like look at
everyone on Fox News saying the same
thing that's what you can do we using
subtitle files movie PI and video grip
and then rincon cam is so someone set up
a way to monitor surfers and so this
entire this entire video I thought he
wrote an open CV application that would
find the surfers and then Moo
move the camera to the surfers and
follow them and then he wrote another or
another program to search through like
days of footage and find the keepers and
then it edit the video using movie PI
and a movie PI creates the clip exports
the clip and sends it out every day so
instead of having someone watching
surfers for 12 hours and just having to
go through all the footage and editing
it together literally programmatically
is able to do all this so it's it's a
really powerful powerful program and
that source code is an online but I
would like it to be it's a cool project
bug the guy that yeah and so this is all
just been picked up I didn't know we're
going on yeah personalities their sfm
takes no action and the guy
yeah totally viable branch I can also
head up you know at different things but
that person thing does yeah livable yeah
yeah that's a very good point yeah live
when in compiling ffmpeg it's important
to have like all the the dependencies
including the baby I mean also I
mentioned media info is a tool that I
use but it's so it sounds similar and
doesn't do JSON which sounds really cool
yeah yeah so you don't have to just
create stuff from scratch you can take
in video again look at the source the
like a video clip it'll just pull it in
they have a reader module that's really
nice that I mean for both like looking
at looking at how ffmpeg works and for
looking at how movie pie works it's a
really great thing to do just look at
look at the source it is it's based on
open CV um yeah that's much I know about
that cool thank you all very much for
coming
you
hi my name is Ulysses welcome to
livestream ninja this is episode four in
today's episode we will be talking about
nginx
and ffmpeg I like to share with you a
fun project that I've been working on on
and off the last couple of weeks and
it's regarding two programs called nginx
and ffmpeg I'm going to share with you
my my desktop so you can see what's
going on so first of all in genetics
what's nginx well and then X is a web
server it's also a proxy server it's
also a cache a little bouncer and also
you can do for streaming so there's an
rtmp module that you can compile the
rtmp of the nginx program and basically
what it does it allows you to stream
live stream using nginx
so that rtmp module needs to be
installed and configured so the
configuration is actually fairly simple
it only takes about 70 lines I'll share
with you my code it's available on
github I will make that link available
for you so here we get two little main
sections the web server under HTTP II
this is the web server section and then
the rtmp section right here on the
bottom so first of all the web server
we're listening on port 80 which is the
default for the web servers server name
is localhost and the root is HTML that's
the web root then we're making dot index
dot PHP as a primary followed by index
HTML and then an index to HTM we have a
couple of folders once dedicate or hls
and then the type here the m3u8 that's
the manifest file for HLS and then you
can see the alias here and it's pointing
to home
HLS slash live and then we get the basic
header and same thing for - we have the
alias and then the cash the header cash
and then on the RTMP configuration we're
listening on port 1935 which is default
for our TMP and have three apps that
we've identified live VOD or video on
demand and restream so first of all live
so we are accepting a life whatever is
the incoming rtmp stream we have that on
and then we are allowing the server
itself to publish to it
so one 27001 if you know a little bit
about networking is actually the IP
address of the server itself and then we
allowing anybody to publish to it as
well as anybody is able to play and and
see the videos see the results in
addition we are also doing recording
recording all streams and in here we
have the path so the recordings are
going to be located in slash home slash
video underscore recordings and then we
set the unique to on so it doesn't
overwrite itself and then we have HLS on
and it's nested and it's got its own
path and then fragment into ten seconds
and then dash is also turned on
what it's a long path and it's also
nested and then video demand you were to
play a video a pre-recorded video you
could put it under slash home slash eld
and then you could create a player for
it and then that recording will be
streamed from the VOD directory and then
restream we have another application
called restream so restream is taking
the incoming rtmp stream and you could
actually restrain that to any rtmp
server whether it's YouTube Facebook
live lava or any other service or server
streaming server that will accept rtmp
connection so that's it
that's the server I will show you what
that server looks like I do have a
floating domain that I use it's called
you lead rocks I use it for projects
such as this and I temporary linked them
to a virtual private server and in this
particular case I'm using digital ocean
and so this domain is temporarily linked
to it so you may not see it because it's
not on later on anyway so in here I have
the streaming server in addition I also
have a web server on port 80 and there I
created JW player on the page you can
see the result so once again if you look
at the vigor Edition 1935 is the rtmp
port port 80 is a web server so where
you're looking at port 80 right now and
I just create a page with a player in it
so you could see what's going on so with
nginx as our streaming server we could
string to it using
multiple ways so we use a software
encoder such as a lark ass we can use
vmix
that's a competitor all our cash OBS an
xsplit for example a very popular to a
lot of gamers so OBS is open broadcaster
software and so you could download that
is free exploit as free as well and of
course everybody knows FM le
but I wouldn't recommend FM le it's
flash media live encoder that program
hasn't been updated in a long time so
anyway so you can use a software color
to string to this so we're going to show
you how to be dead I'm going to share my
work cache here we get the Wirecast you
can see it I'm recording at the moment
I'm going to go ahead and stream and
then from here we're going to use the
rtmp because it's much faster there's no
delay at all whatsoever you can see your
screen
you didn't work I was actually a
software encoder called the workhouse
once again there are other options out
there these the mix obs/xsplit/whatever
now in addition you can also use of a
hardware encoder hardware encoder so
several companies use it there's matrix
who they have several products the
monarch series there's a HD there's a
mono to the monarch there's a monarch HD
and then this
monarch LCS for lecture series I think
it strains two different streams that's
a big difference between those products
live view has a solo let's go lobby solo
a nice thing about that product it has
multiple network connections so you have
internet connection we also could
connect to wireless and then it has two
USB modems and I think about that is
actually aggregates all those network
connections so even if you were to lose
one you could still string let's say for
example you loosely internet connection
you still have your wireless and you
still have your USB bottoms so the live
view is perfect and you know if you want
to do live streaming on the go whether
you're on the park and Beach anywhere
where there's no hardware connection now
Osprey asset LNG 1aj is the Hilo and
then Epiphone has several hardware
encoder as well you can also use a
generic hardware encoder ie I bought
this from across the pond
it's just a small hardware encoder and
has Ethernet connection and the audio
input a stereo encode and a 3.5
millimeter and an inch HDMI input up to
1080 30 frames per second and have that
HDMI output for those who want to
monitor so you could connect a monitor
or screen to this and you can monitor
your your stream and the back it's just
the power 12 volts and that's it it's
fairly small I tested this for hours
that been flawless no problems at all
and it stays pretty cool it's not hot at
all I mean you could put your bare foot
on this and you won't even feel it so
pretty good product so that's another
way of doing it using your hardware
encoder or if you use ffmpeg now ffmpeg
is just a command-line tool for
recording and
or converting files and also for
streaming so in this example on their
website
you can see they are converting an mp4
into a AVI
there's not a lot options or switches
here and just basically take the input
that mp4 and convert it to output avi
without changing bit rates without
changing screen resolutions anything
like that but it is possible you have to
put it on on the command line using all
the different switches and all the
different options that is available on
ffmpeg in addition you could also record
your desktop or a camera - - using
ffmpeg so in the next few minutes I'm
going to show you how to do how to use
ffmpeg see these are terminal here so
the first thing I want to do is I want
to record the desktop so I'm just going
to use that I'm just going to copy this
file so basically we're saying a fan tag
use on the avfoundation which is
specific to the Mac systems now it may
be different on your assistants and then
- I is the the first one is the video
input and then the audio output so I'm
using number three which is this
particular screen that you're looking at
and record that and then we're going to
use we recorded for 15 seconds that's
the - T the screen size are going to be
1280 by 720 and then 30 frames per
second and then the bitrate on the video
the story of 3500 K and kilobits per
second three point five Meg's basically
and then 128 K for audio and then the
output is going to be
mpg
so I'm going to go ahead and do that and
then we're going to overwrite because
there's already a file there before so
now it's actually going to record it I'm
going to move this so you could see it
on the recording it's going to record
for obviously 15 seconds because we told
it so to recode 15 seconds so I'm going
to open up that file now and then play
it and just drag it here so you can see
it so now we have a recording of using
ffmpeg so I'm just going to play off
it's actually like a report and Gentiles
and here's the body movie and then there
it is you could also see me move that
that window so it does work using ffmpeg
so that's recording the desktop we're
going to do next is we're going to
record the camera so we're just going to
clear all our terminal and then instead
of our source being a desktop we're
going to change it to the camera the
year that we're recording right now
you're looking at so we're going to
record that overwrite again and I'm
gonna wait to the camera yeah you know
should daily hear some audio it might be
some feedback as well or some of looping
so it's going to record it for about 15
seconds that's done we're going to open
up the file and then play it you're
going to hear some audio looping and we
really can't want to take the few
seconds so here's an audio and explain
it all you right should be able to see
my hands moving that's going to
put it for about 15 seconds it's done
alright so the next thing we're going to
do is the fun part and so we're going to
go back to our streaming server we're
going to use the ffmpeg to stream a file
not just any file it could be on my
local computer but we're going to use a
file it on a streaming server Amazon s3
so I already uploaded a file out there
called rockfall mov it's just a short
file so we're going to clear again our
screen so if you look at here I am our
input is this URL itself but it's from
Amazon s3 and many other files will rock
folder MOV and we're using X dot 24 to
64 codec preset Derek's fast and then
you have the bitrate and the max rates
and then all year long is 128 K stereo
at the sample rate is 44 100 and then we
want to send a flash format to this rtmp
server right here on our live stream so
see if this works
all right we should be streaming and
there it is there's our file now this
fall is short so it should be done
fairly soon
that's about 15 seconds
maybe 20 or 30 Pele it's streaming and
looking really good so there are those
it stopped and our stream also stopped
so we just basically streamed a file on
Amazon s3 and I'm streaming from my
computer to the nginx that's on digital
ocean so that's pretty cool
next we're going to capture a camera and
stream to it let's clear this terminal
again and paste our code and then
basically the same thing but instead of
a file we're using the camera so we're
going to stream to it so I'm gonna
shamsher it out there it is and I guess
I'm looping some blue be quick nervous
quick nerdy and then our stream stopped
so that is how you stream using ffmpeg
to an engine extreme server now what I
recommend is this other products out
that are more robust more reliable and
damn professional support so you know I
recommend nginx and ffmpeg or production
work for personal working yes I would
love doing it I don't mind using it at
all so if you're interested in any of
these stuff be sure to check the links
are available on site as well as on
YouTube and thanks for watching if
you're interested yeah the nginx
configuration is there as well as the
how to live stream using ffmpeg it's on
my site anyway
thanks for watching we'll see you next
time
ladies and gentlemen on this particular
channel we've taken a look at ffmpeg
before on several different occasions in
the past we've looked at ffmpeg as
primarily a conversion so we've seen
that it does you know some interesting
things like cropping scaling and
rotating but in fact this program is so
much more than that ffmpeg can't do a
whole lot of advanced features and in
some cases can even actually edit a
video this week let's take a look at
some more advanced ffmpeg filters and
operations hello and welcome back to
another random Wednesday episode in this
particular video we're gonna take a look
at some of the more advanced filters
that are present within ffmpeg so this
video is gonna be quite short quite
light I'm gonna be just introducing you
to those effects as well as showing you
a little bit of how to customize each
one of them next week we're gonna
actually take a look at some of the more
advanced features within ffmpeg and this
includes how to string multiple filters
together and we're also gonna look at
how we can actually use that a fan pack
to properly edit a video submit cuts in
them and throw away certain parts of the
video so yeah without further ado let's
jump into taking a look at our filters
before we begin let's start with a very
quick recap of ffmpeg syntax I'm just
gonna very quickly go through what
syntax there is if you need more
detailed instruction about this you
should check out the older video anyway
this is what ffmpeg syntax generally
looks like you want first used - I to
specify your input file you can
optionally include some filters using a
filter string which I will talk about on
a different slide and of course at the
end of the day you do need to specify an
output file name since this is all about
filters let's spend more time looking at
the filter string itself now you do
actually have to type everything
together on one
but it's not very clear what it actually
means so for the sake of clarity I'm
gonna actually split this out into
multiple lines you of course have to
start with a dash VF which stands for
video filters surround your entire fills
our string by quotes and on the inside
this is what you write first of all you
have to start with a filter whatever the
name of a filter is simply type it in
and if you actually want to give it more
settings which usually you do but then
also add an equal sign to specify the
settings you're gonna have to use
basically a setting name equals to the
value you want to set it to so yea it's
basically a key value path you want to
mention the setting name equals the
value you want to set it to if you have
multiple settings separate it with the
colon character you can specify multiple
filters as well and in order to separate
them you want to use a comma so yeah in
this case they're actually two filters
as you can see one filter with its
settings comma and the next filter so
yeah that's essentially what the filter
string syntax looks like so alright
let's start by taking a look at our
video editing filters now let's start
with sharpening of course many cameras
these days produce footage that you know
it's a little bit soft so sharpening is
always helpful as you can see this is a
clean shot out of my DSLR camera and you
can see that you know the edges are sort
of blurry let's make use of the unsharp
filter to make it better so let's look
at very quick before and after before we
continue no this is before this is after
no you might argue that the changes are
little subtle which I would tend to
agree but if you look closely at the
lines here well they do seem to be a
little bit more clip to do this in
ffmpeg you'll wanna make use of the
unsharp filter now the basic command
call is to simply use - filter and say
on sharp by default a pretty decent job
already done but of course we can
actually change the filter size to make
the effects even more apparent to do
this you want to use LX and ly which
actually specifies the filter size any
horizontal and vertical directions by
default both these values are set to 3
and that is the results you see on the
far left bringing it up to 7 gives you
the results in the center which of
course appear sharper and bringing it up
some more to 13 well mix it effects
really prominent in fact a little bit
too much so if you ask me apart from
changing this you can also change the L
a value which actually represents the
intensity of the effect by default in a
set to 1.0 which gives you the effects
on the far left increasing it to 1.5 of
course makes the effect stronger and
interestingly if you would actually use
a negative value you end up blurring the
image what this means is the unsharp
filter also doubles up as a blur filter
if you ever have the need to do that all
right let's move on to our next filter
now of course the pictures coming
straight out of your camera
does not necessarily have to be you know
really clear really nice and bright
but that's why editing actually comes in
where you can actually tweak up things
like brightness contrast and saturation
once again here's a before and after now
I've done this operation on a JPEG image
but you can of course as easily do this
to a video now here's one thing that's
good to tweak you can actually tweak the
contrast of a video now in this
particular case 1.0 actually means no
change reducing this value gives you
less contrast as you can see this image
feel small well washed out and
increasing the value beyond 1 gives you
a more contrast II image you probably
don't want to overdo this values around
1.3 are good a little bit more a little
bit less will be fine but not too much
more brightness well that's
self-explanatory you make the image
brighter or darker
the faults at zero which means no change
reducing the value in other words making
ethical and zero makes the image darker
and increasing it makes it brighter
saturation is of course what you expect
it defaults to one increasing it makes
the colors more apparent and more vivid
whereas decreasing the value makes the
colors go closer to monochrome now you
can also find gamma adjustments for
example in this case I'm actually
tweaking the gamma for you red channel
once again at the first one and that
means well it looks exactly like it used
to reducing the value actually reduces
the median amount of red creating a
scientist looking image which is what we
have right here on the Left increasing
it increases the median amount of red of
course giving us a reddish image of
course using the EQ filter to tweak
color might be a little bit
counterintuitive so let's move on to
take a look at the color balance tool
which of course well is more suitable
for this purpose now there are actually
nine different settings in the color
balance tool because well this is meant
to be strictly a color adjustment so the
cool thing is you can actually change
the amounts of red green and blue 40
shadows mid-tones and highlights
segments of the image separately this
basically allows you to do full-on color
grading you can do many cool effects as
we'll see in a couple of slides now
let's take a look at this one here
basically what I've done is 40 red
shadows I've actually reduced it a
little and for the blue shadows I've
increased it a little the net effects of
doing this is that deep darkest parts of
the image now take on a bluish tint you
can actually see it well in a lot of
these areas then the next thing I've
done is forty highlights I've increased
the red a little and decrease the blue a
little you can ofcourse see this in the
sky we're just now taking on a slight
reddish color now here's another example
on the same image now the shadows have
been pushed towards green which you can
of course see here
and highlights have been pushed towards
a very light purple and the van of
course is still visible here one more
example before we wrap this up all I've
done here is significantly increased the
red in the shadows and decrease the blue
in the shadows as well you can actually
see the reddish tint in a lot of these
areas all right let us move on to the
fun stuff and that would be the audio
visualizations now in order to do this
we actually have to tweak the command a
little across the input is now an audio
file but more crucially the filter now
needs to be filter underscore complex
now the first thing you'll probably want
to do is to generate a wave form you can
use the show waves filter to do this and
they are basically you know two
particularly different modes one being
the line mode and the other being this
center line mode as you can see in both
these examples you can see sort of three
different colors in fact the left
channel is rendered in red the right
channel is rendered in in green so when
you actually see a yellowish orange
color that is when the wave is actually
present on both sides so yeah this is
actually a very interesting way of
picturing so you can of course use the
size arguments to change up the size of
the visualization if you don't actually
use this the original size of the
visualization can be quite small it can
be quite low resolution so you are
recommended to use this if required next
up is frequency which of course is done
using this particular filter and yeah
the idea is this is a histogram showing
you well the lowest frequencies on the
left and highest frequencies all the way
on the right again this method uses two
different colors to show you the
difference between the left and right
channels now for both of these two
techniques we've just seen you can
actually change up the color and for
both these filters the name of the
arguments is the same and that is
colours basically you have two right
equal to and a set of colors separated
by the pipe symbol what I'm assuming
here is that you have a stereo input and
therefore you can only supply two colors
one for the left channel another for the
right channel of course if you're
recording something that has even more
channels than that then of course feel
free to add more colors here's a
frequency graph showing you blue and
purple for the left and right channels
respectively as you can see the colors
look something like this now here's
another one that's more interesting I've
actually included hex color codes
instead of the names of colors and both
of these methods actually work since
these two colors actually sort of
inverses of each other adding them
together creates white and so that
creates this very interesting effect
here now moving away from the two
visualization methods we've just seen
here is a very interesting one called
show cqt now I'm gonna go quiet and
actually let you listen to the piano
piece you know in conjunction with this
visualization and I want you to take
note of how this is essentially showing
you which piano keys are being pressed
cool huh now let's move on to our last
audio visualization which is the
vectorscope it's actually a vector scope
plus the difference between the left and
right channels actually plotting them on
the vertical and horizontal axis and
what he actually get at the end of the
day is this very nice sort of radial
pattern now for this you can actually
tweak several different color settings
which gives you very different results
by changing our CGC and PC you're
actually changing the contrast of the
red green and blue channels in this
particular case I've given a lot of
contrast to the red and blue channels
creating a purple kind of look this is
the default settings which is mostly
greenish and somewhat bluish and this is
another variant which is mostly blue but
this is not the only thing that
influences the color you see over time
the colors actually fade out and you can
influence how quickly each color fades
out to do this you want to use the RF GF
and bf parameters and well the larger
the number the faster a particular color
fades out in this case I've actually
made red fade out the slowest which is
why most of the colors you see here is
red this is the default which actually
makes blue fade out the slowest which is
why you see a lot of glue and yeah this
is another variant in which Green
disappears very quickly and that's why
you see mostly purple left behind for
even more visual interest you can
actually change the draw mode to light
by using the draw parameter and setting
it to line you can more clearly see well
the patterns that are actually drawn out
but a differences in audio between the
left and right channels
alright let us move on to our last part
which is video visualizations now this
might seem a little bit strange
I mean audio visualizations make sense
because well you wanna turn audio into a
form that is visible but as it turns out
video data can be visualized in a
different way as well let's start with
the vectorscope know if you've been
following the rest of my videos as well
you will remember some time ago we
actually talked about you know
expressing digital data in analog forms
and at the end we actually talked about
using vector scopes to visualize video
well we have an example right here
essentially what this does is well all
the colors are being shown in a circle
and well whatever colors there are in
the image is shown as lines that
actually move in the appropriate
direction of the color turns out you can
generate this with ffmpeg using the
vectorscope filter now by default if you
were to just called defective scope
filter the result this kind of boring
looking well first of all it's very low
resolution turns out to be really only
way to fix this is to well change the
format of the input video using a
completely different filter so that's
what I'm doing here I'm setting the
format here to a slightly different one
which generates a larger vector scope
still this is monochrome not-so-fun you
can actually use the mode setting to
change it up to a different look since
this is more colorful I think it you
know sort of conveys the idea in a
clearer manner but yeah of course well
since this is color this is color for
there are actually several different
settings in between that I won't go into
detail I think these two that I've shown
here are the best looking after lot now
you can also introduce one unknown as
graticule and these are just little
labels around the edge of the fact that
scope let tell you what color each
different angle actually corresponds to
you can have these graticule appear in
green or in the actual color they
represents now as a little added bonus
you know as our extra health filter
well you can actually express the same
idea in a slightly different manner
using the CIE scope filter so this is
just a different way of representing
these same information but this looks
more colorful in a way so you might want
to use this instead let's move on to our
last video visualization D waveform now
this one doesn't seem to make a lot of
sense until you actually see it
alongside the actual video now I've had
to do quite a bit of you know as a
fansite trickery to get this one to work
but essentially what's happening here is
that well I've overlaid the original
video on top of two different versions
of the waveform as you can see when
played back it turns out that the
waveform at the bottom is actually
showing the intensities of each column
of the image
well the way from on the left is showing
the intensities of each row so yeah in a
way this is just a brightness meter with
a spatial component to it and to choose
between the row mode or the column mode
well just use the mode parameter on top
of this setting you can actually also
configure it to show color information
and to do that you want to use the
component setting now it feels like this
is actually you know a bit mask of some
kind and specifying components equal to
seven means you want to show all three
channels this is actually showing this
as three different waveforms if you want
you can also combine them all together
by saying display equals overlay so yeah
that is the waveform our last filter for
today and they have it
hopefully by just taking a look at least
nine different filters available within
ffmpeg well you are convinced that
ffmpeg is more than just a conversion
tool but it's also a pretty good editing
and visualization tool that's all there
is for this episode do of course states
you involve follow up next week in which
will actually talk about some advanced
techniques including how to string
multiple of those filters we've just
seen together into one video again
that's all there is for this particular
video thank you very much for watching
and
next time you're watching 0-6 watts UTV
thank you very much for watching if you
like this video consider checking out
the rest of my work on my channel
alternatively you may be interested in a
playlist of my earlier work on computing
and computer science topics if you'd
like to show me some monetary supports I
am on patreon you can find a link to my
campaign in the video description of
course you can simply like this video or
leave a comment I'll be sure to respond
as soon as I can
to keep in touch with my future uploads
do subscribe to this channel and for
even more updates check out the official
Twitter account for this channel @ 0 6 1
2 TV thank you for your support
[Music]
my example application written in Java
language uses FM PAC library package to
open video files after opening video
file it reads the video codec used in
this file
next I return discotheque name from C
code back to Java code there are five
steps to do that create a Java class
with native methods generate header file
with Java H dual code Jorge a unit test
and code C implementation of generated
header file remember about attaching
third-party libraries attaching Java
native interface header files and
setting
environment variables let's install Adam
back library package I configure
installation to have generated shared
library files
I like near files I compile for 64-bit
architecture
I can see compiled DLL files I copied
device to my separated directory
I opened the documentation of a handbag
library and browse the API if I want to
go see application with a fan pack
library
I need the header files of this library
I create java application i write the
class with native methods i write J unit
[Music]
unit tests
and I point where the video file is
there is no C implementation of this
native method so I create C application
library now I generate header file for
the class with not methods I will
include this header file into my C
application
[Music]
I switch architecture into 64-bit I
include Java native interface header
files and ffmpeg header files - I also
include header file I have just
generated will charge till I go to
linker properties and point where the
libraries are
[Music]
now I am able to calculation of
generated header file in C I could fake
implementation and return simple string
I compiled my dll library file now is
the time to set environment variables I
update path variable and point where the
libraries are
[Music]
[Music]
[Music]
logout and login to have path
environment updated
I ran tests in job application and got
error because I have to load library in
Java I do it with system load library
I ran test again and I can see that C
code was executed
[Music]
I called fidella implementation in C I
convert javis drinking to C string I use
a fan pack methods to open video file
[Music]
[Music]
[Music]
and I read video product name
[Music]
in Java test I can see the video codec
name used in my video file I update my
test and it succeeds
I called phenol releases
and this is all thank you
you
[Music]
what's up guys well today I'm going to
show you how to convert video files
using ffmpeg but I'm going to show you
how to do it the easy way
now you might be wondering what does he
mean by the easy way well usually in
ffmpeg you gotta use a series of
complicated commands to get anything
done for example to encode a video for
the PSP out of that command extracting
audio you gotta know this convert to a
WAV file you gotta know that convert to
avi MPEG gotta know that and so on and
so on and so on and so on it's all and
so on and so on and so on and so on and
so on and so on so the easy way what am
I talking about well there is a nice
little add-on to ffmpeg that gives us a
graphical user interface front-end
it's called when FF 1 FF is a GUI for
the command line Video Converter ffmpeg
and it works on both Windows and Linux
because ffmpeg isn't specific to Linux a
lot of people think Linux when they
think about ffmpeg but it is a Windows
video tool as well it works better on
Linux but if you're on Windows you can
also use this now if you go to the
downloads page just listening windows in
abuja there but you're the downloads
page you have all kinds of different
options you download it for pretty much
any distribution you want one thing one
thing to note though here for open SUSE
I wouldn't worry about downloading the
open SUSE one from here using the RPM if
you go to the build service for open
SUSE that's probably going to be your
best bet for example if we go to the
build service type in win FF we can just
click here and you have a one-click
installer for it so if you're on open
SUSE I say install it
through the build service it's probably
a better way to go but you do have the
RPM package here too if you want to do
it that way okay so let's get into it
how do we use when FF well we're going
to open up a terminal window and we're
going to launch when FF it's easy to
launch you just type in when FF when FF
boom and there it is
we can go ahead and minimize that out
the way and this is pretty much it we
select your video file here let's go
with this one because it is the smallest
video file I've got it is a Windows
Media File as you can see and we can
select multiples if we wanted to convert
multiple files at the same time we could
do that too but for demonstration
purposes we don't need to be here all
day so we'll start with that one and
here we select what we want to convert
it into I'm going to go with mpeg-4
because it's you know it's my preferred
format for the devices that I have so
that's what I'm going to use and you can
select quality here
fullscreen widescreen high quality super
high quality and very high quality well
let's go with the best very high quality
and why not now there is you know here
in the output folder you have your
output location now let's go ahead and
change that to the desktop since we're
doing a demonstration there we go
and there is one little glitch with this
GUI you see these two little things in
the corner they don't look like buttons
but they are buttons you can see when I
hover over it click here to apply so
just keep that in mind it there is you
know they're supposed to be buttons even
though they're they don't look like
buttons but click apply and there we go
and that's it we're ready to convert
when we push convert it's going to
automatically launch a terminal window
and execute an ffmpeg session check it
out I'm gonna click it now boom there's
ffmpeg session in the terminal and all
the hard work has been done for us so
yes that is what I mean by converting
videos with ffmpeg the easy way and this
is a very short video so it shouldn't
take very long maybe 30 seconds or so
maybe a minute
you
any day now all right looks like it's
done there it's going to finalize itself
there you go and to finalize the project
we just go ahead and push enter and
we're done there's air converted
transcoded video now just for
demonstration purposes let's find the
original and compare them okay here's
the original just paste this onto the
desktop there okay here is the before
and here is the after let's do this left
to right before after let's start with
the before hopefully the screen
recording picks this up all right
okay that was the before and here is the
after the quality looks the same I don't
see any frame rates or any compression
artifacts I don't see any dropped frame
rates right if there was any frame rates
that's kind of a stupid thing to say but
yeah I don't see any dropped frames or
any compression artifacts audio was good
everything is in sync it looks like a
success now I don't know if any frames
were dropping there in the video but if
it was that's simply because of the
screen recording I promise you here
sitting on desktop in front of me
there's absolutely no issues with it at
all so that is how you do it convert
videos using ffmpeg the easy way now
like I said this does work on Windows as
well ffmpeg does run on Windows of your
own Windows you can use this too anyways
thanks for watching and have a great day
hello people are now teaching how
downloading and installing UFRN pec
the first one will be to enter the
imf website take leave in
description of the video
They were still here in windows
click windows bits and it works
for the estate version 32 or 64
bits depending on the system you
are using
good as I already have it downloaded here
I will now make the method of
installation
good here I created a script that you
copy may also leave the
Video description commands to
create this script
after typing commands you save
as a low file put to whom
file type is all files
Here I will not with me as filed
then the bike hits and click
to save
good now you leave the area
work together with the imf folder take
and enjoys giving-click the script
automatically take imf folder
It will be moved to distance to 62 points
and it will be installed variable
environment that the staff is only that
any doubt
leave your comment until the next
earned
